//
// Generated by Bluespec Compiler, version untagged-g03634cea (build 03634cea)
//
// On Mon Feb 17 13:13:49 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// slave_AWREADY                  O     1 reg
// slave_WREADY                   O     1 reg
// slave_BVALID                   O     1 reg
// slave_BRESP                    O     2 reg
// slave_BID                      O     4 reg
// slave_ARREADY                  O     1 reg
// slave_RVALID                   O     1 reg
// slave_RRESP                    O     2 reg
// slave_RDATA                    O    64 reg
// slave_RLAST                    O     1 reg
// slave_RID                      O     4 reg
// can_take_inp                   O     1
// RDY_can_take_inp               O     1 const
// outp_ready                     O     1 reg
// RDY_outp_ready                 O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// slave_AWVALID                  I     1
// slave_AWADDR                   I    32 reg
// slave_AWSIZE                   I     3 reg
// slave_AWPROT                   I     3 reg
// slave_AWLEN                    I     8 reg
// slave_AWBURST                  I     2 reg
// slave_AWID                     I     4 reg
// slave_WVALID                   I     1
// slave_WDATA                    I    64 reg
// slave_WSTRB                    I     8 reg
// slave_WLAST                    I     1 reg
// slave_WID                      I     4 reg
// slave_BREADY                   I     1
// slave_ARVALID                  I     1
// slave_ARADDR                   I    32 reg
// slave_ARSIZE                   I     3 reg
// slave_ARPROT                   I     3 reg
// slave_ARLEN                    I     8 reg
// slave_ARBURST                  I     2 reg
// slave_ARID                     I     4 reg
// slave_RREADY                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mksha256_dummy(CLK,
		      RST_N,

		      slave_AWVALID,
		      slave_AWADDR,
		      slave_AWSIZE,
		      slave_AWPROT,
		      slave_AWLEN,
		      slave_AWBURST,
		      slave_AWID,

		      slave_AWREADY,

		      slave_WVALID,
		      slave_WDATA,
		      slave_WSTRB,
		      slave_WLAST,
		      slave_WID,

		      slave_WREADY,

		      slave_BVALID,

		      slave_BRESP,

		      slave_BID,

		      slave_BREADY,

		      slave_ARVALID,
		      slave_ARADDR,
		      slave_ARSIZE,
		      slave_ARPROT,
		      slave_ARLEN,
		      slave_ARBURST,
		      slave_ARID,

		      slave_ARREADY,

		      slave_RVALID,

		      slave_RRESP,

		      slave_RDATA,

		      slave_RLAST,

		      slave_RID,

		      slave_RREADY,

		      can_take_inp,
		      RDY_can_take_inp,

		      outp_ready,
		      RDY_outp_ready);
  input  CLK;
  input  RST_N;

  // action method slave_m_awvalid
  input  slave_AWVALID;
  input  [31 : 0] slave_AWADDR;
  input  [2 : 0] slave_AWSIZE;
  input  [2 : 0] slave_AWPROT;
  input  [7 : 0] slave_AWLEN;
  input  [1 : 0] slave_AWBURST;
  input  [3 : 0] slave_AWID;

  // value method slave_m_awready
  output slave_AWREADY;

  // action method slave_m_wvalid
  input  slave_WVALID;
  input  [63 : 0] slave_WDATA;
  input  [7 : 0] slave_WSTRB;
  input  slave_WLAST;
  input  [3 : 0] slave_WID;

  // value method slave_m_wready
  output slave_WREADY;

  // value method slave_m_bvalid
  output slave_BVALID;

  // value method slave_m_bresp
  output [1 : 0] slave_BRESP;

  // value method slave_m_buser

  // value method slave_m_bid
  output [3 : 0] slave_BID;

  // action method slave_m_bready
  input  slave_BREADY;

  // action method slave_m_arvalid
  input  slave_ARVALID;
  input  [31 : 0] slave_ARADDR;
  input  [2 : 0] slave_ARSIZE;
  input  [2 : 0] slave_ARPROT;
  input  [7 : 0] slave_ARLEN;
  input  [1 : 0] slave_ARBURST;
  input  [3 : 0] slave_ARID;

  // value method slave_m_arready
  output slave_ARREADY;

  // value method slave_m_rvalid
  output slave_RVALID;

  // value method slave_m_rresp
  output [1 : 0] slave_RRESP;

  // value method slave_m_rdata
  output [63 : 0] slave_RDATA;

  // value method slave_m_rlast
  output slave_RLAST;

  // value method slave_m_ruser

  // value method slave_m_rid
  output [3 : 0] slave_RID;

  // action method slave_m_rready
  input  slave_RREADY;

  // value method can_take_inp
  output can_take_inp;
  output RDY_can_take_inp;

  // value method outp_ready
  output outp_ready;
  output RDY_outp_ready;

  // signals for module outputs
  wire [63 : 0] slave_RDATA;
  wire [3 : 0] slave_BID, slave_RID;
  wire [1 : 0] slave_BRESP, slave_RRESP;
  wire RDY_can_take_inp,
       RDY_outp_ready,
       can_take_inp,
       outp_ready,
       slave_ARREADY,
       slave_AWREADY,
       slave_BVALID,
       slave_RLAST,
       slave_RVALID,
       slave_WREADY;

  // inlined wires
  wire rg_zeroize_1_whas;

  // register core_reset_OR_rst_zeroize_synced_asserted_isInReset
  reg core_reset_OR_rst_zeroize_synced_asserted_isInReset;
  wire core_reset_OR_rst_zeroize_synced_asserted_isInReset_D_IN,
       core_reset_OR_rst_zeroize_synced_asserted_isInReset_EN;

  // register rg_zeroize
  reg rg_zeroize;
  wire rg_zeroize_D_IN, rg_zeroize_EN;

  // register sha_inp_index
  reg [31 : 0] sha_inp_index;
  wire [31 : 0] sha_inp_index_D_IN;
  wire sha_inp_index_EN;

  // register sha_out_index
  reg [31 : 0] sha_out_index;
  wire [31 : 0] sha_out_index_D_IN;
  wire sha_out_index_EN;

  // register sha_ph
  reg [255 : 0] sha_ph;
  wire [255 : 0] sha_ph_D_IN;
  wire sha_ph_EN;

  // register sha_rg_continuePreHash
  reg sha_rg_continuePreHash;
  wire sha_rg_continuePreHash_D_IN, sha_rg_continuePreHash_EN;

  // register sha_rg_input_text_0
  reg [63 : 0] sha_rg_input_text_0;
  wire [63 : 0] sha_rg_input_text_0_D_IN;
  wire sha_rg_input_text_0_EN;

  // register sha_rg_input_text_1
  reg [63 : 0] sha_rg_input_text_1;
  wire [63 : 0] sha_rg_input_text_1_D_IN;
  wire sha_rg_input_text_1_EN;

  // register sha_rg_input_text_2
  reg [63 : 0] sha_rg_input_text_2;
  wire [63 : 0] sha_rg_input_text_2_D_IN;
  wire sha_rg_input_text_2_EN;

  // register sha_rg_input_text_3
  reg [63 : 0] sha_rg_input_text_3;
  wire [63 : 0] sha_rg_input_text_3_D_IN;
  wire sha_rg_input_text_3_EN;

  // register sha_rg_input_text_4
  reg [63 : 0] sha_rg_input_text_4;
  wire [63 : 0] sha_rg_input_text_4_D_IN;
  wire sha_rg_input_text_4_EN;

  // register sha_rg_input_text_5
  reg [63 : 0] sha_rg_input_text_5;
  wire [63 : 0] sha_rg_input_text_5_D_IN;
  wire sha_rg_input_text_5_EN;

  // register sha_rg_input_text_6
  reg [63 : 0] sha_rg_input_text_6;
  wire [63 : 0] sha_rg_input_text_6_D_IN;
  wire sha_rg_input_text_6_EN;

  // register sha_rg_input_text_7
  reg [63 : 0] sha_rg_input_text_7;
  wire [63 : 0] sha_rg_input_text_7_D_IN;
  wire sha_rg_input_text_7_EN;

  // register sha_rg_outp_ready
  reg sha_rg_outp_ready;
  wire sha_rg_outp_ready_D_IN, sha_rg_outp_ready_EN;

  // register sha_rg_start
  reg sha_rg_start;
  wire sha_rg_start_D_IN, sha_rg_start_EN;

  // register sha_sha_out_0
  reg [63 : 0] sha_sha_out_0;
  wire [63 : 0] sha_sha_out_0_D_IN;
  wire sha_sha_out_0_EN;

  // register sha_sha_out_1
  reg [63 : 0] sha_sha_out_1;
  wire [63 : 0] sha_sha_out_1_D_IN;
  wire sha_sha_out_1_EN;

  // register sha_sha_out_2
  reg [63 : 0] sha_sha_out_2;
  wire [63 : 0] sha_sha_out_2_D_IN;
  wire sha_sha_out_2_EN;

  // register sha_sha_out_3
  reg [63 : 0] sha_sha_out_3;
  wire [63 : 0] sha_sha_out_3_D_IN;
  wire sha_sha_out_3_EN;

  // ports of submodule core_reset_OR_rst_zeroize
  wire core_reset_OR_rst_zeroize_RST_OUT;

  // ports of submodule core_reset_OR_rst_zeroize_synced
  wire core_reset_OR_rst_zeroize_synced_OUT_RST;

  // ports of submodule rst_zeroize
  wire rst_zeroize_ASSERT_IN, rst_zeroize_OUT_RST;

  // ports of submodule s_xactor_f_rd_addr
  wire [51 : 0] s_xactor_f_rd_addr_D_IN, s_xactor_f_rd_addr_D_OUT;
  wire s_xactor_f_rd_addr_CLR,
       s_xactor_f_rd_addr_DEQ,
       s_xactor_f_rd_addr_EMPTY_N,
       s_xactor_f_rd_addr_ENQ,
       s_xactor_f_rd_addr_FULL_N;

  // ports of submodule s_xactor_f_rd_data
  wire [70 : 0] s_xactor_f_rd_data_D_IN, s_xactor_f_rd_data_D_OUT;
  wire s_xactor_f_rd_data_CLR,
       s_xactor_f_rd_data_DEQ,
       s_xactor_f_rd_data_EMPTY_N,
       s_xactor_f_rd_data_ENQ,
       s_xactor_f_rd_data_FULL_N;

  // ports of submodule s_xactor_f_wr_addr
  wire [51 : 0] s_xactor_f_wr_addr_D_IN, s_xactor_f_wr_addr_D_OUT;
  wire s_xactor_f_wr_addr_CLR,
       s_xactor_f_wr_addr_DEQ,
       s_xactor_f_wr_addr_EMPTY_N,
       s_xactor_f_wr_addr_ENQ,
       s_xactor_f_wr_addr_FULL_N;

  // ports of submodule s_xactor_f_wr_data
  wire [76 : 0] s_xactor_f_wr_data_D_IN, s_xactor_f_wr_data_D_OUT;
  wire s_xactor_f_wr_data_CLR,
       s_xactor_f_wr_data_DEQ,
       s_xactor_f_wr_data_EMPTY_N,
       s_xactor_f_wr_data_ENQ,
       s_xactor_f_wr_data_FULL_N;

  // ports of submodule s_xactor_f_wr_resp
  wire [5 : 0] s_xactor_f_wr_resp_D_IN, s_xactor_f_wr_resp_D_OUT;
  wire s_xactor_f_wr_resp_CLR,
       s_xactor_f_wr_resp_DEQ,
       s_xactor_f_wr_resp_EMPTY_N,
       s_xactor_f_wr_resp_ENQ,
       s_xactor_f_wr_resp_FULL_N;

  // ports of submodule sha_sha
  wire [511 : 0] sha_sha_input_engine_input_val;
  wire [255 : 0] sha_sha_input_engine_pre_hash, sha_sha_output_engine_get;
  wire sha_sha_EN_input_engine,
       sha_sha_EN_output_engine_get,
       sha_sha_EN_reset,
       sha_sha_RDY_input_engine,
       sha_sha_RDY_output_engine_get,
       sha_sha_ready;

  // rule scheduling signals
  wire CAN_FIRE_RL_capture_read_request,
       CAN_FIRE_RL_capture_write_request,
       CAN_FIRE_RL_core_reset_OR_rst_zeroize_synced_asserted_isResetAssertedUpdate,
       CAN_FIRE_RL_rg_zeroize__dreg_update,
       CAN_FIRE_RL_rl_zeroize_registers,
       CAN_FIRE_RL_rl_zeroize_status,
       CAN_FIRE_RL_sha_rl_display,
       CAN_FIRE_RL_sha_rl_getOutput,
       CAN_FIRE_RL_sha_rl_start,
       CAN_FIRE_slave_m_arvalid,
       CAN_FIRE_slave_m_awvalid,
       CAN_FIRE_slave_m_bready,
       CAN_FIRE_slave_m_rready,
       CAN_FIRE_slave_m_wvalid,
       WILL_FIRE_RL_capture_read_request,
       WILL_FIRE_RL_capture_write_request,
       WILL_FIRE_RL_core_reset_OR_rst_zeroize_synced_asserted_isResetAssertedUpdate,
       WILL_FIRE_RL_rg_zeroize__dreg_update,
       WILL_FIRE_RL_rl_zeroize_registers,
       WILL_FIRE_RL_rl_zeroize_status,
       WILL_FIRE_RL_sha_rl_display,
       WILL_FIRE_RL_sha_rl_getOutput,
       WILL_FIRE_RL_sha_rl_start,
       WILL_FIRE_slave_m_arvalid,
       WILL_FIRE_slave_m_awvalid,
       WILL_FIRE_slave_m_bready,
       WILL_FIRE_slave_m_rready,
       WILL_FIRE_slave_m_wvalid;

  // inputs to muxes for submodule ports
  wire MUX_sha_rg_outp_ready_write_1__SEL_1, MUX_sha_rg_start_write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h2767;
  reg [63 : 0] v__h3236;
  reg [63 : 0] v__h3434;
  reg [63 : 0] v__h3643;
  reg [63 : 0] v__h2622;
  reg [63 : 0] v__h6128;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] a__h3758, x_rdata__h3819;
  reg [1 : 0] CASE_s_xactor_f_rd_addrD_OUT_BITS_27_TO_20_0x_ETC__q1,
	      CASE_s_xactor_f_wr_addrD_OUT_BITS_27_TO_20_0x_ETC__q2;
  wire [511 : 0] input_val__h2169;
  wire [255 : 0] x__h6880;
  wire [63 : 0] rdata__h3824, read_resp__h3560, read_resp__h3762;
  wire sha_inp_index_07_SLT_7___d108, sha_out_index_7_SLT_3___d58;

  // action method slave_m_awvalid
  assign CAN_FIRE_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_awvalid = 1'd1 ;

  // value method slave_m_awready
  assign slave_AWREADY = s_xactor_f_wr_addr_FULL_N ;

  // action method slave_m_wvalid
  assign CAN_FIRE_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_wvalid = 1'd1 ;

  // value method slave_m_wready
  assign slave_WREADY = s_xactor_f_wr_data_FULL_N ;

  // value method slave_m_bvalid
  assign slave_BVALID = s_xactor_f_wr_resp_EMPTY_N ;

  // value method slave_m_bresp
  assign slave_BRESP = s_xactor_f_wr_resp_D_OUT[5:4] ;

  // value method slave_m_bid
  assign slave_BID = s_xactor_f_wr_resp_D_OUT[3:0] ;

  // action method slave_m_bready
  assign CAN_FIRE_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_slave_m_bready = 1'd1 ;

  // action method slave_m_arvalid
  assign CAN_FIRE_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_arvalid = 1'd1 ;

  // value method slave_m_arready
  assign slave_ARREADY = s_xactor_f_rd_addr_FULL_N ;

  // value method slave_m_rvalid
  assign slave_RVALID = s_xactor_f_rd_data_EMPTY_N ;

  // value method slave_m_rresp
  assign slave_RRESP = s_xactor_f_rd_data_D_OUT[70:69] ;

  // value method slave_m_rdata
  assign slave_RDATA = s_xactor_f_rd_data_D_OUT[68:5] ;

  // value method slave_m_rlast
  assign slave_RLAST = s_xactor_f_rd_data_D_OUT[4] ;

  // value method slave_m_rid
  assign slave_RID = s_xactor_f_rd_data_D_OUT[3:0] ;

  // action method slave_m_rready
  assign CAN_FIRE_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_slave_m_rready = 1'd1 ;

  // value method can_take_inp
  assign can_take_inp = sha_sha_ready ;
  assign RDY_can_take_inp = 1'd1 ;

  // value method outp_ready
  assign outp_ready = sha_rg_outp_ready ;
  assign RDY_outp_ready = 1'd1 ;

  // submodule core_reset_OR_rst_zeroize
  ResetEither core_reset_OR_rst_zeroize(.A_RST(RST_N),
					.B_RST(rst_zeroize_OUT_RST),
					.RST_OUT(core_reset_OR_rst_zeroize_RST_OUT));

  // submodule core_reset_OR_rst_zeroize_synced
  SyncResetA #(.RSTDELAY(32'd1)) core_reset_OR_rst_zeroize_synced(.CLK(CLK),
								  .IN_RST(core_reset_OR_rst_zeroize_RST_OUT),
								  .OUT_RST(core_reset_OR_rst_zeroize_synced_OUT_RST));

  // submodule rst_zeroize
  MakeReset0 #(.init(1'd1)) rst_zeroize(.CLK(CLK),
					.RST(RST_N),
					.ASSERT_IN(rst_zeroize_ASSERT_IN),
					.ASSERT_OUT(),
					.OUT_RST(rst_zeroize_OUT_RST));

  // submodule s_xactor_f_rd_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) s_xactor_f_rd_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(s_xactor_f_rd_addr_D_IN),
							     .ENQ(s_xactor_f_rd_addr_ENQ),
							     .DEQ(s_xactor_f_rd_addr_DEQ),
							     .CLR(s_xactor_f_rd_addr_CLR),
							     .D_OUT(s_xactor_f_rd_addr_D_OUT),
							     .FULL_N(s_xactor_f_rd_addr_FULL_N),
							     .EMPTY_N(s_xactor_f_rd_addr_EMPTY_N));

  // submodule s_xactor_f_rd_data
  FIFO2 #(.width(32'd71), .guarded(1'd1)) s_xactor_f_rd_data(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(s_xactor_f_rd_data_D_IN),
							     .ENQ(s_xactor_f_rd_data_ENQ),
							     .DEQ(s_xactor_f_rd_data_DEQ),
							     .CLR(s_xactor_f_rd_data_CLR),
							     .D_OUT(s_xactor_f_rd_data_D_OUT),
							     .FULL_N(s_xactor_f_rd_data_FULL_N),
							     .EMPTY_N(s_xactor_f_rd_data_EMPTY_N));

  // submodule s_xactor_f_wr_addr
  FIFO2 #(.width(32'd52), .guarded(1'd1)) s_xactor_f_wr_addr(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(s_xactor_f_wr_addr_D_IN),
							     .ENQ(s_xactor_f_wr_addr_ENQ),
							     .DEQ(s_xactor_f_wr_addr_DEQ),
							     .CLR(s_xactor_f_wr_addr_CLR),
							     .D_OUT(s_xactor_f_wr_addr_D_OUT),
							     .FULL_N(s_xactor_f_wr_addr_FULL_N),
							     .EMPTY_N(s_xactor_f_wr_addr_EMPTY_N));

  // submodule s_xactor_f_wr_data
  FIFO2 #(.width(32'd77), .guarded(1'd1)) s_xactor_f_wr_data(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(s_xactor_f_wr_data_D_IN),
							     .ENQ(s_xactor_f_wr_data_ENQ),
							     .DEQ(s_xactor_f_wr_data_DEQ),
							     .CLR(s_xactor_f_wr_data_CLR),
							     .D_OUT(s_xactor_f_wr_data_D_OUT),
							     .FULL_N(s_xactor_f_wr_data_FULL_N),
							     .EMPTY_N(s_xactor_f_wr_data_EMPTY_N));

  // submodule s_xactor_f_wr_resp
  FIFO2 #(.width(32'd6), .guarded(1'd1)) s_xactor_f_wr_resp(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(s_xactor_f_wr_resp_D_IN),
							    .ENQ(s_xactor_f_wr_resp_ENQ),
							    .DEQ(s_xactor_f_wr_resp_DEQ),
							    .CLR(s_xactor_f_wr_resp_CLR),
							    .D_OUT(s_xactor_f_wr_resp_D_OUT),
							    .FULL_N(s_xactor_f_wr_resp_FULL_N),
							    .EMPTY_N(s_xactor_f_wr_resp_EMPTY_N));

  // submodule sha_sha
  mksequential_sha_engine sha_sha(.CLK(CLK),
				  .RST_N(core_reset_OR_rst_zeroize_synced_OUT_RST),
				  .input_engine_input_val(sha_sha_input_engine_input_val),
				  .input_engine_pre_hash(sha_sha_input_engine_pre_hash),
				  .EN_reset(sha_sha_EN_reset),
				  .EN_input_engine(sha_sha_EN_input_engine),
				  .EN_output_engine_get(sha_sha_EN_output_engine_get),
				  .RDY_reset(),
				  .ready(sha_sha_ready),
				  .RDY_ready(),
				  .RDY_input_engine(sha_sha_RDY_input_engine),
				  .output_engine_get(sha_sha_output_engine_get),
				  .RDY_output_engine_get(sha_sha_RDY_output_engine_get));

  // rule RL_rl_zeroize_registers
  assign CAN_FIRE_RL_rl_zeroize_registers = rg_zeroize ;
  assign WILL_FIRE_RL_rl_zeroize_registers = rg_zeroize ;

  // rule RL_rl_zeroize_status
  assign CAN_FIRE_RL_rl_zeroize_status = 1'd1 ;
  assign WILL_FIRE_RL_rl_zeroize_status = 1'd1 ;

  // rule RL_core_reset_OR_rst_zeroize_synced_asserted_isResetAssertedUpdate
  assign CAN_FIRE_RL_core_reset_OR_rst_zeroize_synced_asserted_isResetAssertedUpdate =
	     core_reset_OR_rst_zeroize_synced_asserted_isInReset ;
  assign WILL_FIRE_RL_core_reset_OR_rst_zeroize_synced_asserted_isResetAssertedUpdate =
	     core_reset_OR_rst_zeroize_synced_asserted_isInReset ;

  // rule RL_sha_rl_getOutput
  assign CAN_FIRE_RL_sha_rl_getOutput =
	     sha_sha_RDY_output_engine_get && sha_sha_ready && !sha_rg_start ;
  assign WILL_FIRE_RL_sha_rl_getOutput =
	     CAN_FIRE_RL_sha_rl_getOutput &&
	     !WILL_FIRE_RL_capture_write_request &&
	     !WILL_FIRE_RL_capture_read_request ;

  // rule RL_sha_rl_display
  assign CAN_FIRE_RL_sha_rl_display = sha_rg_start ;
  assign WILL_FIRE_RL_sha_rl_display = sha_rg_start ;

  // rule RL_capture_read_request
  assign CAN_FIRE_RL_capture_read_request =
	     s_xactor_f_rd_addr_EMPTY_N && s_xactor_f_rd_data_FULL_N ;
  assign WILL_FIRE_RL_capture_read_request =
	     CAN_FIRE_RL_capture_read_request ;

  // rule RL_sha_rl_start
  assign CAN_FIRE_RL_sha_rl_start =
	     sha_sha_RDY_input_engine && sha_rg_start && sha_sha_ready ;
  assign WILL_FIRE_RL_sha_rl_start =
	     CAN_FIRE_RL_sha_rl_start && !WILL_FIRE_RL_capture_read_request ;

  // rule RL_capture_write_request
  assign CAN_FIRE_RL_capture_write_request =
	     s_xactor_f_wr_addr_EMPTY_N && s_xactor_f_wr_data_EMPTY_N &&
	     s_xactor_f_wr_resp_FULL_N ;
  assign WILL_FIRE_RL_capture_write_request =
	     CAN_FIRE_RL_capture_write_request ;

  // rule RL_rg_zeroize__dreg_update
  assign CAN_FIRE_RL_rg_zeroize__dreg_update = 1'd1 ;
  assign WILL_FIRE_RL_rg_zeroize__dreg_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_sha_rg_outp_ready_write_1__SEL_1 =
	     WILL_FIRE_RL_capture_read_request &&
	     s_xactor_f_rd_addr_D_OUT[27:20] == 8'h80 &&
	     !sha_out_index_7_SLT_3___d58 ;
  assign MUX_sha_rg_start_write_1__SEL_1 =
	     WILL_FIRE_RL_capture_write_request &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 &&
	     !sha_inp_index_07_SLT_7___d108 ;

  // inlined wires
  assign rg_zeroize_1_whas =
	     WILL_FIRE_RL_capture_write_request &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'hC4 ;

  // register core_reset_OR_rst_zeroize_synced_asserted_isInReset
  assign core_reset_OR_rst_zeroize_synced_asserted_isInReset_D_IN = 1'd0 ;
  assign core_reset_OR_rst_zeroize_synced_asserted_isInReset_EN =
	     core_reset_OR_rst_zeroize_synced_asserted_isInReset ;

  // register rg_zeroize
  assign rg_zeroize_D_IN = rg_zeroize_1_whas && s_xactor_f_wr_data_D_OUT[13] ;
  assign rg_zeroize_EN = 1'd1 ;

  // register sha_inp_index
  assign sha_inp_index_D_IN =
	     sha_inp_index_07_SLT_7___d108 ? sha_inp_index + 32'd1 : 32'd0 ;
  assign sha_inp_index_EN =
	     WILL_FIRE_RL_capture_write_request &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 ;

  // register sha_out_index
  assign sha_out_index_D_IN =
	     sha_out_index_7_SLT_3___d58 ? sha_out_index + 32'd1 : 32'd0 ;
  assign sha_out_index_EN =
	     WILL_FIRE_RL_capture_read_request &&
	     s_xactor_f_rd_addr_D_OUT[27:20] == 8'h80 ;

  // register sha_ph
  assign sha_ph_D_IN =
	     sha_rg_continuePreHash ?
	       x__h6880 :
	       256'h6A09E667BB67AE853C6EF372A54FF53A510E527F9B05688C1F83D9AB5BE0CD19 ;
  assign sha_ph_EN = MUX_sha_rg_start_write_1__SEL_1 ;

  // register sha_rg_continuePreHash
  assign sha_rg_continuePreHash_D_IN =
	     s_xactor_f_wr_addr_D_OUT[27:20] != 8'hC0 ||
	     s_xactor_f_wr_data_D_OUT[13] ;
  assign sha_rg_continuePreHash_EN =
	     WILL_FIRE_RL_capture_write_request &&
	     (s_xactor_f_wr_addr_D_OUT[27:20] == 8'hC0 ||
	      s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 &&
	      !sha_inp_index_07_SLT_7___d108 &&
	      !sha_rg_continuePreHash) ;

  // register sha_rg_input_text_0
  assign sha_rg_input_text_0_D_IN = s_xactor_f_wr_data_D_OUT[76:13] ;
  assign sha_rg_input_text_0_EN =
	     WILL_FIRE_RL_capture_write_request && sha_inp_index == 32'd0 &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 ;

  // register sha_rg_input_text_1
  assign sha_rg_input_text_1_D_IN = s_xactor_f_wr_data_D_OUT[76:13] ;
  assign sha_rg_input_text_1_EN =
	     WILL_FIRE_RL_capture_write_request && sha_inp_index == 32'd1 &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 ;

  // register sha_rg_input_text_2
  assign sha_rg_input_text_2_D_IN = s_xactor_f_wr_data_D_OUT[76:13] ;
  assign sha_rg_input_text_2_EN =
	     WILL_FIRE_RL_capture_write_request && sha_inp_index == 32'd2 &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 ;

  // register sha_rg_input_text_3
  assign sha_rg_input_text_3_D_IN = s_xactor_f_wr_data_D_OUT[76:13] ;
  assign sha_rg_input_text_3_EN =
	     WILL_FIRE_RL_capture_write_request && sha_inp_index == 32'd3 &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 ;

  // register sha_rg_input_text_4
  assign sha_rg_input_text_4_D_IN = s_xactor_f_wr_data_D_OUT[76:13] ;
  assign sha_rg_input_text_4_EN =
	     WILL_FIRE_RL_capture_write_request && sha_inp_index == 32'd4 &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 ;

  // register sha_rg_input_text_5
  assign sha_rg_input_text_5_D_IN = s_xactor_f_wr_data_D_OUT[76:13] ;
  assign sha_rg_input_text_5_EN =
	     WILL_FIRE_RL_capture_write_request && sha_inp_index == 32'd5 &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 ;

  // register sha_rg_input_text_6
  assign sha_rg_input_text_6_D_IN = s_xactor_f_wr_data_D_OUT[76:13] ;
  assign sha_rg_input_text_6_EN =
	     WILL_FIRE_RL_capture_write_request && sha_inp_index == 32'd6 &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 ;

  // register sha_rg_input_text_7
  assign sha_rg_input_text_7_D_IN = s_xactor_f_wr_data_D_OUT[76:13] ;
  assign sha_rg_input_text_7_EN =
	     WILL_FIRE_RL_capture_write_request && sha_inp_index == 32'd7 &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 ;

  // register sha_rg_outp_ready
  assign sha_rg_outp_ready_D_IN =
	     !MUX_sha_rg_outp_ready_write_1__SEL_1 &&
	     !WILL_FIRE_RL_sha_rl_start ;
  assign sha_rg_outp_ready_EN =
	     WILL_FIRE_RL_capture_read_request &&
	     s_xactor_f_rd_addr_D_OUT[27:20] == 8'h80 &&
	     !sha_out_index_7_SLT_3___d58 ||
	     WILL_FIRE_RL_sha_rl_start ||
	     WILL_FIRE_RL_sha_rl_getOutput ;

  // register sha_rg_start
  assign sha_rg_start_D_IN = MUX_sha_rg_start_write_1__SEL_1 ;
  assign sha_rg_start_EN =
	     WILL_FIRE_RL_capture_write_request &&
	     s_xactor_f_wr_addr_D_OUT[27:20] == 8'h0 &&
	     !sha_inp_index_07_SLT_7___d108 ||
	     WILL_FIRE_RL_capture_read_request &&
	     s_xactor_f_rd_addr_D_OUT[27:20] == 8'h80 &&
	     !sha_out_index_7_SLT_3___d58 ||
	     WILL_FIRE_RL_sha_rl_getOutput ||
	     WILL_FIRE_RL_sha_rl_start ;

  // register sha_sha_out_0
  assign sha_sha_out_0_D_IN = sha_sha_output_engine_get[255:192] ;
  assign sha_sha_out_0_EN = WILL_FIRE_RL_sha_rl_getOutput ;

  // register sha_sha_out_1
  assign sha_sha_out_1_D_IN = sha_sha_output_engine_get[191:128] ;
  assign sha_sha_out_1_EN = WILL_FIRE_RL_sha_rl_getOutput ;

  // register sha_sha_out_2
  assign sha_sha_out_2_D_IN = sha_sha_output_engine_get[127:64] ;
  assign sha_sha_out_2_EN = WILL_FIRE_RL_sha_rl_getOutput ;

  // register sha_sha_out_3
  assign sha_sha_out_3_D_IN = sha_sha_output_engine_get[63:0] ;
  assign sha_sha_out_3_EN = WILL_FIRE_RL_sha_rl_getOutput ;

  // submodule rst_zeroize
  assign rst_zeroize_ASSERT_IN = rg_zeroize ;

  // submodule s_xactor_f_rd_addr
  assign s_xactor_f_rd_addr_D_IN =
	     { slave_ARADDR,
	       slave_ARPROT,
	       slave_ARSIZE,
	       slave_ARLEN,
	       slave_ARBURST,
	       slave_ARID } ;
  assign s_xactor_f_rd_addr_ENQ = slave_ARVALID && s_xactor_f_rd_addr_FULL_N ;
  assign s_xactor_f_rd_addr_DEQ = CAN_FIRE_RL_capture_read_request ;
  assign s_xactor_f_rd_addr_CLR = 1'b0 ;

  // submodule s_xactor_f_rd_data
  assign s_xactor_f_rd_data_D_IN =
	     { CASE_s_xactor_f_rd_addrD_OUT_BITS_27_TO_20_0x_ETC__q1,
	       x_rdata__h3819,
	       1'd1,
	       s_xactor_f_rd_addr_D_OUT[3:0] } ;
  assign s_xactor_f_rd_data_ENQ = CAN_FIRE_RL_capture_read_request ;
  assign s_xactor_f_rd_data_DEQ = slave_RREADY && s_xactor_f_rd_data_EMPTY_N ;
  assign s_xactor_f_rd_data_CLR = 1'b0 ;

  // submodule s_xactor_f_wr_addr
  assign s_xactor_f_wr_addr_D_IN =
	     { slave_AWADDR,
	       slave_AWPROT,
	       slave_AWLEN,
	       slave_AWSIZE,
	       slave_AWBURST,
	       slave_AWID } ;
  assign s_xactor_f_wr_addr_ENQ = slave_AWVALID && s_xactor_f_wr_addr_FULL_N ;
  assign s_xactor_f_wr_addr_DEQ = CAN_FIRE_RL_capture_write_request ;
  assign s_xactor_f_wr_addr_CLR = 1'b0 ;

  // submodule s_xactor_f_wr_data
  assign s_xactor_f_wr_data_D_IN =
	     { slave_WDATA, slave_WSTRB, slave_WID, slave_WLAST } ;
  assign s_xactor_f_wr_data_ENQ = slave_WVALID && s_xactor_f_wr_data_FULL_N ;
  assign s_xactor_f_wr_data_DEQ = CAN_FIRE_RL_capture_write_request ;
  assign s_xactor_f_wr_data_CLR = 1'b0 ;

  // submodule s_xactor_f_wr_resp
  assign s_xactor_f_wr_resp_D_IN =
	     { CASE_s_xactor_f_wr_addrD_OUT_BITS_27_TO_20_0x_ETC__q2,
	       s_xactor_f_wr_addr_D_OUT[3:0] } ;
  assign s_xactor_f_wr_resp_ENQ = CAN_FIRE_RL_capture_write_request ;
  assign s_xactor_f_wr_resp_DEQ = slave_BREADY && s_xactor_f_wr_resp_EMPTY_N ;
  assign s_xactor_f_wr_resp_CLR = 1'b0 ;

  // submodule sha_sha
  assign sha_sha_input_engine_input_val = input_val__h2169 ;
  assign sha_sha_input_engine_pre_hash = sha_ph ;
  assign sha_sha_EN_reset = 1'b0 ;
  assign sha_sha_EN_input_engine = WILL_FIRE_RL_sha_rl_start ;
  assign sha_sha_EN_output_engine_get = WILL_FIRE_RL_sha_rl_getOutput ;

  // remaining internal signals
  assign input_val__h2169 =
	     { sha_rg_input_text_0,
	       sha_rg_input_text_1,
	       sha_rg_input_text_2,
	       sha_rg_input_text_3,
	       sha_rg_input_text_4,
	       sha_rg_input_text_5,
	       sha_rg_input_text_6,
	       sha_rg_input_text_7 } ;
  assign rdata__h3824 =
	     { 63'd0, core_reset_OR_rst_zeroize_synced_asserted_isInReset } ;
  assign read_resp__h3560 =
	     { 7'd0,
	       sha_rg_continuePreHash,
	       7'd0,
	       sha_rg_continuePreHash,
	       7'd0,
	       sha_rg_continuePreHash,
	       7'd0,
	       sha_rg_continuePreHash,
	       7'd0,
	       sha_rg_continuePreHash,
	       7'd0,
	       sha_rg_continuePreHash,
	       7'd0,
	       sha_rg_continuePreHash,
	       7'd0,
	       sha_rg_continuePreHash } ;
  assign read_resp__h3762 =
	     { 6'd0,
	       sha_rg_outp_ready,
	       ~sha_sha_ready,
	       6'd0,
	       sha_rg_outp_ready,
	       ~sha_sha_ready,
	       6'd0,
	       sha_rg_outp_ready,
	       ~sha_sha_ready,
	       6'd0,
	       sha_rg_outp_ready,
	       ~sha_sha_ready,
	       6'd0,
	       sha_rg_outp_ready,
	       ~sha_sha_ready,
	       6'd0,
	       sha_rg_outp_ready,
	       ~sha_sha_ready,
	       6'd0,
	       sha_rg_outp_ready,
	       ~sha_sha_ready,
	       6'd0,
	       sha_rg_outp_ready,
	       ~sha_sha_ready } ;
  assign sha_inp_index_07_SLT_7___d108 =
	     (sha_inp_index ^ 32'h80000000) < 32'h80000007 ;
  assign sha_out_index_7_SLT_3___d58 =
	     (sha_out_index ^ 32'h80000000) < 32'h80000003 ;
  assign x__h6880 =
	     { sha_sha_out_0, sha_sha_out_1, sha_sha_out_2, sha_sha_out_3 } ;
  always@(sha_out_index or
	  sha_sha_out_0 or sha_sha_out_1 or sha_sha_out_2 or sha_sha_out_3)
  begin
    case (sha_out_index)
      32'd0: a__h3758 = sha_sha_out_0;
      32'd1: a__h3758 = sha_sha_out_1;
      32'd2: a__h3758 = sha_sha_out_2;
      32'd3: a__h3758 = sha_sha_out_3;
      default: a__h3758 = 64'b0 /* unspecified value */ ;
    endcase
  end
  always@(s_xactor_f_rd_addr_D_OUT or
	  read_resp__h3560 or a__h3758 or read_resp__h3762 or rdata__h3824)
  begin
    case (s_xactor_f_rd_addr_D_OUT[27:20])
      8'h80: x_rdata__h3819 = a__h3758;
      8'hC1: x_rdata__h3819 = read_resp__h3762;
      8'hC8: x_rdata__h3819 = rdata__h3824;
      default: x_rdata__h3819 = read_resp__h3560;
    endcase
  end
  always@(s_xactor_f_rd_addr_D_OUT)
  begin
    case (s_xactor_f_rd_addr_D_OUT[27:20])
      8'h80, 8'hC0, 8'hC1, 8'hC8:
	  CASE_s_xactor_f_rd_addrD_OUT_BITS_27_TO_20_0x_ETC__q1 = 2'd0;
      default: CASE_s_xactor_f_rd_addrD_OUT_BITS_27_TO_20_0x_ETC__q1 = 2'd2;
    endcase
  end
  always@(s_xactor_f_wr_addr_D_OUT)
  begin
    case (s_xactor_f_wr_addr_D_OUT[27:20])
      8'h0, 8'hC0, 8'hC4:
	  CASE_s_xactor_f_wr_addrD_OUT_BITS_27_TO_20_0x_ETC__q2 = 2'd0;
      default: CASE_s_xactor_f_wr_addrD_OUT_BITS_27_TO_20_0x_ETC__q2 = 2'd2;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      rg_zeroize <= `BSV_ASSIGNMENT_DELAY 1'd0;
    end
  else
    begin
      if (rg_zeroize_EN) rg_zeroize <= `BSV_ASSIGNMENT_DELAY rg_zeroize_D_IN;
    end

  always@(posedge CLK or
	  `BSV_RESET_EDGE core_reset_OR_rst_zeroize_synced_OUT_RST)
  if (core_reset_OR_rst_zeroize_synced_OUT_RST == `BSV_RESET_VALUE)
    begin
      core_reset_OR_rst_zeroize_synced_asserted_isInReset <= `BSV_ASSIGNMENT_DELAY
	  1'd1;
      sha_inp_index <= `BSV_ASSIGNMENT_DELAY 32'd0;
      sha_out_index <= `BSV_ASSIGNMENT_DELAY 32'd0;
      sha_ph <= `BSV_ASSIGNMENT_DELAY 256'd0;
      sha_rg_continuePreHash <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sha_rg_input_text_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      sha_rg_input_text_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      sha_rg_input_text_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      sha_rg_input_text_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      sha_rg_input_text_4 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      sha_rg_input_text_5 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      sha_rg_input_text_6 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      sha_rg_input_text_7 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      sha_rg_outp_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sha_rg_start <= `BSV_ASSIGNMENT_DELAY 1'd0;
      sha_sha_out_0 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      sha_sha_out_1 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      sha_sha_out_2 <= `BSV_ASSIGNMENT_DELAY 64'd0;
      sha_sha_out_3 <= `BSV_ASSIGNMENT_DELAY 64'd0;
    end
  else
    begin
      if (core_reset_OR_rst_zeroize_synced_asserted_isInReset_EN)
	core_reset_OR_rst_zeroize_synced_asserted_isInReset <= `BSV_ASSIGNMENT_DELAY
	    core_reset_OR_rst_zeroize_synced_asserted_isInReset_D_IN;
      if (sha_inp_index_EN)
	sha_inp_index <= `BSV_ASSIGNMENT_DELAY sha_inp_index_D_IN;
      if (sha_out_index_EN)
	sha_out_index <= `BSV_ASSIGNMENT_DELAY sha_out_index_D_IN;
      if (sha_ph_EN) sha_ph <= `BSV_ASSIGNMENT_DELAY sha_ph_D_IN;
      if (sha_rg_continuePreHash_EN)
	sha_rg_continuePreHash <= `BSV_ASSIGNMENT_DELAY
	    sha_rg_continuePreHash_D_IN;
      if (sha_rg_input_text_0_EN)
	sha_rg_input_text_0 <= `BSV_ASSIGNMENT_DELAY sha_rg_input_text_0_D_IN;
      if (sha_rg_input_text_1_EN)
	sha_rg_input_text_1 <= `BSV_ASSIGNMENT_DELAY sha_rg_input_text_1_D_IN;
      if (sha_rg_input_text_2_EN)
	sha_rg_input_text_2 <= `BSV_ASSIGNMENT_DELAY sha_rg_input_text_2_D_IN;
      if (sha_rg_input_text_3_EN)
	sha_rg_input_text_3 <= `BSV_ASSIGNMENT_DELAY sha_rg_input_text_3_D_IN;
      if (sha_rg_input_text_4_EN)
	sha_rg_input_text_4 <= `BSV_ASSIGNMENT_DELAY sha_rg_input_text_4_D_IN;
      if (sha_rg_input_text_5_EN)
	sha_rg_input_text_5 <= `BSV_ASSIGNMENT_DELAY sha_rg_input_text_5_D_IN;
      if (sha_rg_input_text_6_EN)
	sha_rg_input_text_6 <= `BSV_ASSIGNMENT_DELAY sha_rg_input_text_6_D_IN;
      if (sha_rg_input_text_7_EN)
	sha_rg_input_text_7 <= `BSV_ASSIGNMENT_DELAY sha_rg_input_text_7_D_IN;
      if (sha_rg_outp_ready_EN)
	sha_rg_outp_ready <= `BSV_ASSIGNMENT_DELAY sha_rg_outp_ready_D_IN;
      if (sha_rg_start_EN)
	sha_rg_start <= `BSV_ASSIGNMENT_DELAY sha_rg_start_D_IN;
      if (sha_sha_out_0_EN)
	sha_sha_out_0 <= `BSV_ASSIGNMENT_DELAY sha_sha_out_0_D_IN;
      if (sha_sha_out_1_EN)
	sha_sha_out_1 <= `BSV_ASSIGNMENT_DELAY sha_sha_out_1_D_IN;
      if (sha_sha_out_2_EN)
	sha_sha_out_2 <= `BSV_ASSIGNMENT_DELAY sha_sha_out_2_D_IN;
      if (sha_sha_out_3_EN)
	sha_sha_out_3 <= `BSV_ASSIGNMENT_DELAY sha_sha_out_3_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    core_reset_OR_rst_zeroize_synced_asserted_isInReset = 1'h0;
    rg_zeroize = 1'h0;
    sha_inp_index = 32'hAAAAAAAA;
    sha_out_index = 32'hAAAAAAAA;
    sha_ph =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    sha_rg_continuePreHash = 1'h0;
    sha_rg_input_text_0 = 64'hAAAAAAAAAAAAAAAA;
    sha_rg_input_text_1 = 64'hAAAAAAAAAAAAAAAA;
    sha_rg_input_text_2 = 64'hAAAAAAAAAAAAAAAA;
    sha_rg_input_text_3 = 64'hAAAAAAAAAAAAAAAA;
    sha_rg_input_text_4 = 64'hAAAAAAAAAAAAAAAA;
    sha_rg_input_text_5 = 64'hAAAAAAAAAAAAAAAA;
    sha_rg_input_text_6 = 64'hAAAAAAAAAAAAAAAA;
    sha_rg_input_text_7 = 64'hAAAAAAAAAAAAAAAA;
    sha_rg_outp_ready = 1'h0;
    sha_rg_start = 1'h0;
    sha_sha_out_0 = 64'hAAAAAAAAAAAAAAAA;
    sha_sha_out_1 = 64'hAAAAAAAAAAAAAAAA;
    sha_sha_out_2 = 64'hAAAAAAAAAAAAAAAA;
    sha_sha_out_3 = 64'hAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
//#0
    if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sha_rl_getOutput)
	begin
	  v__h2767 = $time;
//#0
	end
    if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sha_rl_getOutput)
	$display(v__h2767, "SHA: Getting o/p: %h", sha_sha_output_engine_get);
    if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
      if (sha_rg_start)
	begin
	  v__h3236 = $time;
//#0
	end
    if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
      if (sha_rg_start)
	$display(v__h3236,
		 " SHA: StatusReg: %h",
		 { 6'd0, sha_rg_outp_ready, ~sha_sha_ready });
    if (RST_N != `BSV_RESET_VALUE)
      if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_capture_read_request &&
	    s_xactor_f_rd_addr_D_OUT[27:20] != 8'hC8)
	  begin
	    v__h3434 = $time;
	//#0
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_capture_read_request &&
	    s_xactor_f_rd_addr_D_OUT[27:20] != 8'hC8)
	  $display(v__h3434,
		   "\tSHA: Read Req: Output %h",
		   { sha_sha_out_3,
		     sha_sha_out_2,
		     sha_sha_out_1,
		     sha_sha_out_0 });
    if (RST_N != `BSV_RESET_VALUE)
      if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_capture_read_request &&
	    s_xactor_f_rd_addr_D_OUT[27:20] == 8'hC1)
	  begin
	    v__h3643 = $time;
	//#0
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_capture_read_request &&
	    s_xactor_f_rd_addr_D_OUT[27:20] == 8'hC1)
	  $display(v__h3643,
		   "SHA: Status read response %b, %b",
		   sha_rg_outp_ready,
		   sha_rg_continuePreHash);
    if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sha_rl_start) $display("SHA: PH %h", sha_ph);
    if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sha_rl_start)
	begin
	  v__h2622 = $time;
//#0
	end
    if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_sha_rl_start)
	$display(v__h2622, "SHA: Sending inputs: %h ", input_val__h2169);
    if (RST_N != `BSV_RESET_VALUE)
      if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_capture_write_request &&
	    s_xactor_f_wr_addr_D_OUT[27:20] != 8'hC4)
	  begin
	    v__h6128 = $time;
	//#0
	  end
    if (RST_N != `BSV_RESET_VALUE)
      if (core_reset_OR_rst_zeroize_synced_OUT_RST != `BSV_RESET_VALUE)
	if (WILL_FIRE_RL_capture_write_request &&
	    s_xactor_f_wr_addr_D_OUT[27:20] != 8'hC4)
	  $display(v__h6128,
		   "\tSHA: Write Req: Addr: %h Data: %h",
		   s_xactor_f_wr_addr_D_OUT[51:20],
		   s_xactor_f_wr_data_D_OUT[76:13]);
  end
  // synopsys translate_on
endmodule  // mksha256_dummy

