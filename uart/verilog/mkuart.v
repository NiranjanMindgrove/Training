//
// Generated by Bluespec Compiler, version untagged-g2930c314 (build 2930c314)
//
// On Wed Feb 26 13:59:23 IST 2025
//
//
// Ports:
// Name                         I/O  size props
// read_req                       O    33
// RDY_read_req                   O     1 const
// write_req                      O     1
// RDY_write_req                  O     1 const
// io_SOUT                        O     1 reg
// io_SOUT_EN                     O     1 reg
// interrupt                      O     1
// outp_ready                     O     1
// can_take_inp                   O     1
// uart_ren                       O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// read_req_addr                  I    32
// read_req_size                  I     2
// write_req_addr                 I    32
// write_req_data                 I    32
// write_req_size                 I     2
// io_SIN                         I     1
// EN_read_req                    I     1
// EN_write_req                   I     1
//
// Combinational paths from inputs to outputs:
//   (read_req_addr, read_req_size) -> read_req
//   write_req_addr -> write_req
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkuart(CLK,
	      RST_N,

	      read_req_addr,
	      read_req_size,
	      EN_read_req,
	      read_req,
	      RDY_read_req,

	      write_req_addr,
	      write_req_data,
	      write_req_size,
	      EN_write_req,
	      write_req,
	      RDY_write_req,

	      io_SIN,

	      io_SOUT,

	      io_SOUT_EN,

	      interrupt,

	      outp_ready,

	      can_take_inp,

	      uart_ren);
  input  CLK;
  input  RST_N;

  // actionvalue method read_req
  input  [31 : 0] read_req_addr;
  input  [1 : 0] read_req_size;
  input  EN_read_req;
  output [32 : 0] read_req;
  output RDY_read_req;

  // actionvalue method write_req
  input  [31 : 0] write_req_addr;
  input  [31 : 0] write_req_data;
  input  [1 : 0] write_req_size;
  input  EN_write_req;
  output write_req;
  output RDY_write_req;

  // action method io_sin
  input  io_SIN;

  // value method io_sout
  output io_SOUT;

  // value method io_sout_en
  output io_SOUT_EN;

  // value method interrupt
  output interrupt;

  // value method outp_ready
  output outp_ready;

  // value method can_take_inp
  output can_take_inp;

  // value method uart_ren
  output uart_ren;

  // signals for module outputs
  wire [32 : 0] read_req;
  wire RDY_read_req,
       RDY_write_req,
       can_take_inp,
       interrupt,
       io_SOUT,
       io_SOUT_EN,
       outp_ready,
       uart_ren,
       write_req;

  // inlined wires
  wire uart_uart_fifoRecv_ifc_rwDeqCount_whas,
       uart_uart_fifoRecv_ifc_rwEnqCount_whas,
       uart_uart_fifoXmit_ifc_rwDeqCount_whas,
       uart_uart_fifoXmit_ifc_rwEnqCount_whas,
       uart_uart_pwRecvCellCountReset_whas,
       uart_uart_pwRecvEnableBitCount_whas,
       uart_uart_pwRecvResetBitCount_whas,
       uart_uart_pwXmitCellCountReset_whas,
       uart_uart_pwXmitEnableBitCount_whas,
       uart_uart_pwXmitResetBitCount_whas,
       uart_uart_wr_rx_outp_ready_wget,
       uart_uart_wr_tx_can_take_inp_wget;

  // register uart_baud_value
  reg [15 : 0] uart_baud_value;
  wire [15 : 0] uart_baud_value_D_IN;
  wire uart_baud_value_EN;

  // register uart_rg_char_decide
  reg [1 : 0] uart_rg_char_decide;
  wire [1 : 0] uart_rg_char_decide_D_IN;
  wire uart_rg_char_decide_EN;

  // register uart_rg_charsize
  reg [5 : 0] uart_rg_charsize;
  reg [5 : 0] uart_rg_charsize_D_IN;
  wire uart_rg_charsize_EN;

  // register uart_rg_delay_control
  reg [15 : 0] uart_rg_delay_control;
  wire [15 : 0] uart_rg_delay_control_D_IN;
  wire uart_rg_delay_control_EN;

  // register uart_rg_interrupt_en
  reg [15 : 0] uart_rg_interrupt_en;
  wire [15 : 0] uart_rg_interrupt_en_D_IN;
  wire uart_rg_interrupt_en_EN;

  // register uart_rg_parity
  reg [1 : 0] uart_rg_parity;
  wire [1 : 0] uart_rg_parity_D_IN;
  wire uart_rg_parity_EN;

  // register uart_rg_pullup_enable
  reg uart_rg_pullup_enable;
  wire uart_rg_pullup_enable_D_IN, uart_rg_pullup_enable_EN;

  // register uart_rg_rx_dma_threshold
  reg [2 : 0] uart_rg_rx_dma_threshold;
  wire [2 : 0] uart_rg_rx_dma_threshold_D_IN;
  wire uart_rg_rx_dma_threshold_EN;

  // register uart_rg_rx_threshold
  reg [4 : 0] uart_rg_rx_threshold;
  wire [4 : 0] uart_rg_rx_threshold_D_IN;
  wire uart_rg_rx_threshold_EN;

  // register uart_rg_stopbits
  reg [1 : 0] uart_rg_stopbits;
  wire [1 : 0] uart_rg_stopbits_D_IN;
  wire uart_rg_stopbits_EN;

  // register uart_rg_tx_dma_threshold
  reg [2 : 0] uart_rg_tx_dma_threshold;
  wire [2 : 0] uart_rg_tx_dma_threshold_D_IN;
  wire uart_rg_tx_dma_threshold_EN;

  // register uart_uart_error_status_register
  reg [3 : 0] uart_uart_error_status_register;
  wire [3 : 0] uart_uart_error_status_register_D_IN;
  wire uart_uart_error_status_register_EN;

  // register uart_uart_fifoRecv_ifc_rDataAvail
  reg [4 : 0] uart_uart_fifoRecv_ifc_rDataAvail;
  wire [4 : 0] uart_uart_fifoRecv_ifc_rDataAvail_D_IN;
  wire uart_uart_fifoRecv_ifc_rDataAvail_EN;

  // register uart_uart_fifoRecv_ifc_rDataCount
  reg [4 : 0] uart_uart_fifoRecv_ifc_rDataCount;
  wire [4 : 0] uart_uart_fifoRecv_ifc_rDataCount_D_IN;
  wire uart_uart_fifoRecv_ifc_rDataCount_EN;

  // register uart_uart_fifoRecv_ifc_rStorage
  reg [127 : 0] uart_uart_fifoRecv_ifc_rStorage;
  wire [127 : 0] uart_uart_fifoRecv_ifc_rStorage_D_IN;
  wire uart_uart_fifoRecv_ifc_rStorage_EN;

  // register uart_uart_fifoRecv_ifc_rStorageMask
  reg [127 : 0] uart_uart_fifoRecv_ifc_rStorageMask;
  wire [127 : 0] uart_uart_fifoRecv_ifc_rStorageMask_D_IN;
  wire uart_uart_fifoRecv_ifc_rStorageMask_EN;

  // register uart_uart_fifoXmit_ifc_rDataAvail
  reg [4 : 0] uart_uart_fifoXmit_ifc_rDataAvail;
  wire [4 : 0] uart_uart_fifoXmit_ifc_rDataAvail_D_IN;
  wire uart_uart_fifoXmit_ifc_rDataAvail_EN;

  // register uart_uart_fifoXmit_ifc_rDataCount
  reg [4 : 0] uart_uart_fifoXmit_ifc_rDataCount;
  wire [4 : 0] uart_uart_fifoXmit_ifc_rDataCount_D_IN;
  wire uart_uart_fifoXmit_ifc_rDataCount_EN;

  // register uart_uart_fifoXmit_ifc_rStorage
  reg [127 : 0] uart_uart_fifoXmit_ifc_rStorage;
  wire [127 : 0] uart_uart_fifoXmit_ifc_rStorage_D_IN;
  wire uart_uart_fifoXmit_ifc_rStorage_EN;

  // register uart_uart_fifoXmit_ifc_rStorageMask
  reg [127 : 0] uart_uart_fifoXmit_ifc_rStorageMask;
  wire [127 : 0] uart_uart_fifoXmit_ifc_rStorageMask_D_IN;
  wire uart_uart_fifoXmit_ifc_rStorageMask_EN;

  // register uart_uart_fifo_almost_full
  reg uart_uart_fifo_almost_full;
  wire uart_uart_fifo_almost_full_D_IN, uart_uart_fifo_almost_full_EN;

  // register uart_uart_out_enable
  reg uart_uart_out_enable;
  wire uart_uart_out_enable_D_IN, uart_uart_out_enable_EN;

  // register uart_uart_rRecvBitCount
  reg [5 : 0] uart_uart_rRecvBitCount;
  wire [5 : 0] uart_uart_rRecvBitCount_D_IN;
  wire uart_uart_rRecvBitCount_EN;

  // register uart_uart_rRecvCellCount
  reg [3 : 0] uart_uart_rRecvCellCount;
  wire [3 : 0] uart_uart_rRecvCellCount_D_IN;
  wire uart_uart_rRecvCellCount_EN;

  // register uart_uart_rRecvParity
  reg uart_uart_rRecvParity;
  wire uart_uart_rRecvParity_D_IN, uart_uart_rRecvParity_EN;

  // register uart_uart_rRecvState
  reg [2 : 0] uart_uart_rRecvState;
  reg [2 : 0] uart_uart_rRecvState_D_IN;
  wire uart_uart_rRecvState_EN;

  // register uart_uart_rXmitBitCount
  reg [5 : 0] uart_uart_rXmitBitCount;
  wire [5 : 0] uart_uart_rXmitBitCount_D_IN;
  wire uart_uart_rXmitBitCount_EN;

  // register uart_uart_rXmitCellCount
  reg [3 : 0] uart_uart_rXmitCellCount;
  wire [3 : 0] uart_uart_rXmitCellCount_D_IN;
  wire uart_uart_rXmitCellCount_EN;

  // register uart_uart_rXmitDataOut
  reg uart_uart_rXmitDataOut;
  reg uart_uart_rXmitDataOut_D_IN;
  wire uart_uart_rXmitDataOut_EN;

  // register uart_uart_rXmitParity
  reg uart_uart_rXmitParity;
  wire uart_uart_rXmitParity_D_IN, uart_uart_rXmitParity_EN;

  // register uart_uart_rXmitState
  reg [3 : 0] uart_uart_rXmitState;
  reg [3 : 0] uart_uart_rXmitState_D_IN;
  wire uart_uart_rXmitState_EN;

  // register uart_uart_rg_delay_count
  reg [15 : 0] uart_uart_rg_delay_count;
  reg [15 : 0] uart_uart_rg_delay_count_D_IN;
  wire uart_uart_rg_delay_count_EN;

  // register uart_uart_vrRecvBuffer_0
  reg uart_uart_vrRecvBuffer_0;
  wire uart_uart_vrRecvBuffer_0_D_IN, uart_uart_vrRecvBuffer_0_EN;

  // register uart_uart_vrRecvBuffer_1
  reg uart_uart_vrRecvBuffer_1;
  wire uart_uart_vrRecvBuffer_1_D_IN, uart_uart_vrRecvBuffer_1_EN;

  // register uart_uart_vrRecvBuffer_2
  reg uart_uart_vrRecvBuffer_2;
  wire uart_uart_vrRecvBuffer_2_D_IN, uart_uart_vrRecvBuffer_2_EN;

  // register uart_uart_vrRecvBuffer_3
  reg uart_uart_vrRecvBuffer_3;
  wire uart_uart_vrRecvBuffer_3_D_IN, uart_uart_vrRecvBuffer_3_EN;

  // register uart_uart_vrRecvBuffer_4
  reg uart_uart_vrRecvBuffer_4;
  wire uart_uart_vrRecvBuffer_4_D_IN, uart_uart_vrRecvBuffer_4_EN;

  // register uart_uart_vrRecvBuffer_5
  reg uart_uart_vrRecvBuffer_5;
  wire uart_uart_vrRecvBuffer_5_D_IN, uart_uart_vrRecvBuffer_5_EN;

  // register uart_uart_vrRecvBuffer_6
  reg uart_uart_vrRecvBuffer_6;
  wire uart_uart_vrRecvBuffer_6_D_IN, uart_uart_vrRecvBuffer_6_EN;

  // register uart_uart_vrRecvBuffer_7
  reg uart_uart_vrRecvBuffer_7;
  wire uart_uart_vrRecvBuffer_7_D_IN, uart_uart_vrRecvBuffer_7_EN;

  // register uart_uart_vrXmitBuffer_0
  reg uart_uart_vrXmitBuffer_0;
  wire uart_uart_vrXmitBuffer_0_D_IN, uart_uart_vrXmitBuffer_0_EN;

  // register uart_uart_vrXmitBuffer_1
  reg uart_uart_vrXmitBuffer_1;
  wire uart_uart_vrXmitBuffer_1_D_IN, uart_uart_vrXmitBuffer_1_EN;

  // register uart_uart_vrXmitBuffer_2
  reg uart_uart_vrXmitBuffer_2;
  wire uart_uart_vrXmitBuffer_2_D_IN, uart_uart_vrXmitBuffer_2_EN;

  // register uart_uart_vrXmitBuffer_3
  reg uart_uart_vrXmitBuffer_3;
  wire uart_uart_vrXmitBuffer_3_D_IN, uart_uart_vrXmitBuffer_3_EN;

  // register uart_uart_vrXmitBuffer_4
  reg uart_uart_vrXmitBuffer_4;
  wire uart_uart_vrXmitBuffer_4_D_IN, uart_uart_vrXmitBuffer_4_EN;

  // register uart_uart_vrXmitBuffer_5
  reg uart_uart_vrXmitBuffer_5;
  wire uart_uart_vrXmitBuffer_5_D_IN, uart_uart_vrXmitBuffer_5_EN;

  // register uart_uart_vrXmitBuffer_6
  reg uart_uart_vrXmitBuffer_6;
  wire uart_uart_vrXmitBuffer_6_D_IN, uart_uart_vrXmitBuffer_6_EN;

  // register uart_uart_vrXmitBuffer_7
  reg uart_uart_vrXmitBuffer_7;
  wire uart_uart_vrXmitBuffer_7_D_IN, uart_uart_vrXmitBuffer_7_EN;

  // ports of submodule uart_uart_baudGen_rBaudCounter
  wire [15 : 0] uart_uart_baudGen_rBaudCounter_DATA_A,
		uart_uart_baudGen_rBaudCounter_DATA_B,
		uart_uart_baudGen_rBaudCounter_DATA_C,
		uart_uart_baudGen_rBaudCounter_DATA_F,
		uart_uart_baudGen_rBaudCounter_Q_OUT;
  wire uart_uart_baudGen_rBaudCounter_ADDA,
       uart_uart_baudGen_rBaudCounter_ADDB,
       uart_uart_baudGen_rBaudCounter_SETC,
       uart_uart_baudGen_rBaudCounter_SETF;

  // ports of submodule uart_uart_rRecvData
  wire uart_uart_rRecvData_dD_OUT,
       uart_uart_rRecvData_sD_IN,
       uart_uart_rRecvData_sEN;

  // rule scheduling signals
  wire CAN_FIRE_RL_uart_rl_send_dma_threshold,
       CAN_FIRE_RL_uart_rl_send_rx_threshold,
       CAN_FIRE_RL_uart_rl_set_charsize,
       CAN_FIRE_RL_uart_uart_baudGen_baud_count_wire,
       CAN_FIRE_RL_uart_uart_baud_generator_clock_enable,
       CAN_FIRE_RL_uart_uart_fifoRecv_ifc_update,
       CAN_FIRE_RL_uart_uart_fifoXmit_ifc_update,
       CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter,
       CAN_FIRE_RL_uart_uart_receive_bit_counter,
       CAN_FIRE_RL_uart_uart_receive_buffer_shift,
       CAN_FIRE_RL_uart_uart_receive_find_center_of_bit_cell,
       CAN_FIRE_RL_uart_uart_receive_parity_bit,
       CAN_FIRE_RL_uart_uart_receive_sample_pin,
       CAN_FIRE_RL_uart_uart_receive_stop_first_bit,
       CAN_FIRE_RL_uart_uart_receive_stop_last_bit,
       CAN_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample,
       CAN_FIRE_RL_uart_uart_receive_wait_for_start_bit,
       CAN_FIRE_RL_uart_uart_rl_delay_control,
       CAN_FIRE_RL_uart_uart_rl_dma_signals,
       CAN_FIRE_RL_uart_uart_rl_update_fifo_almost_full,
       CAN_FIRE_RL_uart_uart_transmit_bit_cell_time_counter,
       CAN_FIRE_RL_uart_uart_transmit_bit_counter,
       CAN_FIRE_RL_uart_uart_transmit_buffer_load,
       CAN_FIRE_RL_uart_uart_transmit_buffer_shift,
       CAN_FIRE_RL_uart_uart_transmit_send_parity_bit,
       CAN_FIRE_RL_uart_uart_transmit_send_start_bit,
       CAN_FIRE_RL_uart_uart_transmit_send_stop_bit,
       CAN_FIRE_RL_uart_uart_transmit_send_stop_bit1_5,
       CAN_FIRE_RL_uart_uart_transmit_send_stop_bit2,
       CAN_FIRE_RL_uart_uart_transmit_shift_next_bit,
       CAN_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time,
       CAN_FIRE_RL_uart_uart_transmit_wait_for_start_command,
       CAN_FIRE_io_sin,
       CAN_FIRE_read_req,
       CAN_FIRE_write_req,
       WILL_FIRE_RL_uart_rl_send_dma_threshold,
       WILL_FIRE_RL_uart_rl_send_rx_threshold,
       WILL_FIRE_RL_uart_rl_set_charsize,
       WILL_FIRE_RL_uart_uart_baudGen_baud_count_wire,
       WILL_FIRE_RL_uart_uart_baud_generator_clock_enable,
       WILL_FIRE_RL_uart_uart_fifoRecv_ifc_update,
       WILL_FIRE_RL_uart_uart_fifoXmit_ifc_update,
       WILL_FIRE_RL_uart_uart_receive_bit_cell_time_counter,
       WILL_FIRE_RL_uart_uart_receive_bit_counter,
       WILL_FIRE_RL_uart_uart_receive_buffer_shift,
       WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell,
       WILL_FIRE_RL_uart_uart_receive_parity_bit,
       WILL_FIRE_RL_uart_uart_receive_sample_pin,
       WILL_FIRE_RL_uart_uart_receive_stop_first_bit,
       WILL_FIRE_RL_uart_uart_receive_stop_last_bit,
       WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample,
       WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit,
       WILL_FIRE_RL_uart_uart_rl_delay_control,
       WILL_FIRE_RL_uart_uart_rl_dma_signals,
       WILL_FIRE_RL_uart_uart_rl_update_fifo_almost_full,
       WILL_FIRE_RL_uart_uart_transmit_bit_cell_time_counter,
       WILL_FIRE_RL_uart_uart_transmit_bit_counter,
       WILL_FIRE_RL_uart_uart_transmit_buffer_load,
       WILL_FIRE_RL_uart_uart_transmit_buffer_shift,
       WILL_FIRE_RL_uart_uart_transmit_send_parity_bit,
       WILL_FIRE_RL_uart_uart_transmit_send_start_bit,
       WILL_FIRE_RL_uart_uart_transmit_send_stop_bit,
       WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5,
       WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2,
       WILL_FIRE_RL_uart_uart_transmit_shift_next_bit,
       WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time,
       WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command,
       WILL_FIRE_io_sin,
       WILL_FIRE_read_req,
       WILL_FIRE_write_req;

  // inputs to muxes for submodule ports
  wire [15 : 0] MUX_uart_uart_rg_delay_count_write_1__VAL_1;
  wire [3 : 0] MUX_uart_uart_error_status_register_write_1__VAL_1,
	       MUX_uart_uart_error_status_register_write_1__VAL_2,
	       MUX_uart_uart_rXmitState_write_1__VAL_2,
	       MUX_uart_uart_rXmitState_write_1__VAL_3,
	       MUX_uart_uart_rXmitState_write_1__VAL_4,
	       MUX_uart_uart_rXmitState_write_1__VAL_5,
	       MUX_uart_uart_rXmitState_write_1__VAL_6,
	       MUX_uart_uart_rXmitState_write_1__VAL_7,
	       MUX_uart_uart_rXmitState_write_1__VAL_8;
  wire [2 : 0] MUX_uart_uart_rRecvState_write_1__VAL_1,
	       MUX_uart_uart_rRecvState_write_1__VAL_2,
	       MUX_uart_uart_rRecvState_write_1__VAL_3,
	       MUX_uart_uart_rRecvState_write_1__VAL_4;
  wire MUX_uart_uart_error_status_register_write_1__SEL_1,
       MUX_uart_uart_fifo_almost_full_write_1__VAL_2,
       MUX_uart_uart_out_enable_write_1__SEL_1,
       MUX_uart_uart_rRecvState_write_1__SEL_6,
       MUX_uart_uart_rXmitDataOut_write_1__SEL_1,
       MUX_uart_uart_rXmitDataOut_write_1__SEL_4,
       MUX_uart_uart_rXmitDataOut_write_1__VAL_2,
       MUX_uart_uart_rXmitState_write_1__SEL_1,
       MUX_uart_uart_rg_delay_count_write_1__SEL_1,
       MUX_uart_uart_rg_delay_count_write_1__SEL_2;

  // remaining internal signals
  reg [31 : 0] IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424,
	       x__h16334,
	       x_wget__h3636;
  reg [7 : 0] CASE_value6504_0_IF_uart_uart_fifoRecv_ifc_rDa_ETC__q1,
	      CASE_value6504_0_IF_uart_uart_fifoRecv_ifc_rDa_ETC__q2,
	      IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246;
  wire [127 : 0] enqData__h1615,
		 enqData__h3771,
		 enqMask__h1616,
		 enqMask__h3772,
		 nextMask__h1610,
		 nextMask__h1618,
		 nextMask__h3766,
		 nextMask__h3774,
		 nextStorage__h1609,
		 nextStorage__h1617,
		 nextStorage__h3765,
		 nextStorage__h3773,
		 x__h1686,
		 x__h1873,
		 x__h1989,
		 x__h3839,
		 x__h4012,
		 x__h4128,
		 y__h1687,
		 y__h3840;
  wire [31 : 0] _theResult___fst__h19805,
		a__h16635,
		a__h16637,
		return_data__h16913,
		return_data__h18522,
		return_data__h18849,
		return_data__h19168,
		return_data__h19487,
		value__h4013,
		value__h4129,
		x__h1837,
		x__h1981,
		x__h21670,
		x__h3976,
		x__h4120,
		x_wget__h3695,
		y_avValue_fst__h16577;
  wire [15 : 0] IF_IF_read_req_size_EQ_2_56_THEN_4_ELSE_0_CONC_ETC___d397,
		x__h14788;
  wire [7 : 0] IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d382,
	       IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d386,
	       parity_data__h12800,
	       parity_data__h12805,
	       parity_data__h12810,
	       value__h1874,
	       value__h1990,
	       x__h8568,
	       x_wget__h1480;
  wire [5 : 0] x__h11114, x__h18133, x__h7065, y__h15222, y__h8232, y__h8254;
  wire [4 : 0] b__h16503,
	       b__h1755,
	       b__h1787,
	       b__h2128,
	       b__h21628,
	       b__h3894,
	       b__h4267,
	       b__h4299,
	       value__h1937,
	       value__h4076,
	       x_error_status__h16125;
  wire [3 : 0] _1_SL_IF_write_req_size_EQ_2_41_THEN_4_ELSE_0_C_ETC___d458,
	       x__h11088,
	       x__h5361;
  wire [2 : 0] IF_uart_uart_rRecvBitCount_7_EQ_uart_rg_charsi_ETC___d129,
	       value__h16504,
	       value__h21629;
  wire [1 : 0] x__h16473, x__h21595;
  wire NOT_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_ua_ETC___d170,
       _dand2uart_uart_pwXmitCellCountReset_EN_wset,
       uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78,
       uart_uart_rXmitBitCount_20_EQ_uart_rg_charsize_ETC___d299,
       uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280,
       uart_uart_vrRecvBuffer_0_45_XOR_uart_uart_vrRe_ETC___d159,
       x__h15612,
       z__h10207,
       z__h10214,
       z__h10221,
       z__h10228,
       z__h10235,
       z__h10242,
       z__h10249,
       z__h12725,
       z__h12732,
       z__h12739,
       z__h12746,
       z__h12753,
       z__h12760;

  // actionvalue method read_req
  assign read_req =
	     { x__h16334,
	       read_req_addr[5:0] == 6'h0C || read_req_addr[5:0] == 6'h08 ||
	       read_req_addr[5:0] == 6'h14 ||
	       read_req_addr[5:0] == 6'h0 ||
	       read_req_addr[5:0] == 6'h10 ||
	       read_req_addr[5:0] == 6'h18 ||
	       read_req_addr[5:0] == 6'h20 } ;
  assign RDY_read_req = 1'd1 ;
  assign CAN_FIRE_read_req = 1'd1 ;
  assign WILL_FIRE_read_req = EN_read_req ;

  // actionvalue method write_req
  assign write_req =
	     write_req_addr[5:0] == 6'h04 || write_req_addr[5:0] == 6'h0 ||
	     write_req_addr[5:0] == 6'h10 ||
	     write_req_addr[5:0] == 6'h14 ||
	     write_req_addr[5:0] == 6'h18 ||
	     write_req_addr[5:0] == 6'h0C ||
	     write_req_addr[5:0] == 6'h20 ;
  assign RDY_write_req = 1'd1 ;
  assign CAN_FIRE_write_req = 1'd1 ;
  assign WILL_FIRE_write_req = EN_write_req ;

  // action method io_sin
  assign CAN_FIRE_io_sin = 1'd1 ;
  assign WILL_FIRE_io_sin = 1'd1 ;

  // value method io_sout
  assign io_SOUT = uart_uart_rXmitDataOut ;

  // value method io_sout_en
  assign io_SOUT_EN = uart_uart_out_enable ;

  // value method interrupt
  assign interrupt = 1'b0 /* unspecified value */  ;

  // value method outp_ready
  assign outp_ready = 1'b0 /* unspecified value */  ;

  // value method can_take_inp
  assign can_take_inp = 1'b0 /* unspecified value */  ;

  // value method uart_ren
  assign uart_ren = 1'b0 /* unspecified value */  ;

  // submodule uart_uart_baudGen_rBaudCounter
  Counter #(.width(32'd16),
	    .init(16'd0)) uart_uart_baudGen_rBaudCounter(.CLK(CLK),
							 .RST(RST_N),
							 .DATA_A(uart_uart_baudGen_rBaudCounter_DATA_A),
							 .DATA_B(uart_uart_baudGen_rBaudCounter_DATA_B),
							 .DATA_C(uart_uart_baudGen_rBaudCounter_DATA_C),
							 .DATA_F(uart_uart_baudGen_rBaudCounter_DATA_F),
							 .ADDA(uart_uart_baudGen_rBaudCounter_ADDA),
							 .ADDB(uart_uart_baudGen_rBaudCounter_ADDB),
							 .SETC(uart_uart_baudGen_rBaudCounter_SETC),
							 .SETF(uart_uart_baudGen_rBaudCounter_SETF),
							 .Q_OUT(uart_uart_baudGen_rBaudCounter_Q_OUT));

  // submodule uart_uart_rRecvData
  SyncBit1 #(.init(1'd0)) uart_uart_rRecvData(.sCLK(CLK),
					      .dCLK(CLK),
					      .sRST(RST_N),
					      .sD_IN(uart_uart_rRecvData_sD_IN),
					      .sEN(uart_uart_rRecvData_sEN),
					      .dD_OUT(uart_uart_rRecvData_dD_OUT));

  // rule RL_uart_rl_send_rx_threshold
  assign CAN_FIRE_RL_uart_rl_send_rx_threshold = 1'd1 ;
  assign WILL_FIRE_RL_uart_rl_send_rx_threshold = 1'd1 ;

  // rule RL_uart_rl_send_dma_threshold
  assign CAN_FIRE_RL_uart_rl_send_dma_threshold = 1'd1 ;
  assign WILL_FIRE_RL_uart_rl_send_dma_threshold = 1'd1 ;

  // rule RL_uart_uart_rl_dma_signals
  assign CAN_FIRE_RL_uart_uart_rl_dma_signals = 1'b1 ;
  assign WILL_FIRE_RL_uart_uart_rl_dma_signals = 1'b1 ;

  // rule RL_uart_uart_baudGen_baud_count_wire
  assign CAN_FIRE_RL_uart_uart_baudGen_baud_count_wire = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_baudGen_baud_count_wire = 1'd1 ;

  // rule RL_uart_uart_baud_generator_clock_enable
  assign CAN_FIRE_RL_uart_uart_baud_generator_clock_enable = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_baud_generator_clock_enable = 1'd1 ;

  // rule RL_uart_uart_receive_wait_for_start_bit
  assign CAN_FIRE_RL_uart_uart_receive_wait_for_start_bit =
	     uart_uart_rRecvState == 3'd0 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit =
	     CAN_FIRE_RL_uart_uart_receive_wait_for_start_bit ;

  // rule RL_uart_uart_receive_find_center_of_bit_cell
  assign CAN_FIRE_RL_uart_uart_receive_find_center_of_bit_cell =
	     uart_uart_rRecvState == 3'd1 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell =
	     CAN_FIRE_RL_uart_uart_receive_find_center_of_bit_cell ;

  // rule RL_uart_uart_receive_wait_bit_cell_time_for_sample
  assign CAN_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample =
	     uart_uart_rRecvState == 3'd2 &&
	     uart_uart_rRecvCellCount == 4'hF &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample =
	     CAN_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample ;

  // rule RL_uart_uart_receive_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter =
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_receive_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter ;

  // rule RL_uart_uart_receive_sample_pin
  assign CAN_FIRE_RL_uart_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;
  assign WILL_FIRE_RL_uart_uart_receive_sample_pin =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // rule RL_uart_uart_receive_parity_bit
  assign CAN_FIRE_RL_uart_uart_receive_parity_bit =
	     uart_uart_rRecvState == 3'd4 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_receive_parity_bit =
	     CAN_FIRE_RL_uart_uart_receive_parity_bit ;

  // rule RL_uart_uart_receive_stop_first_bit
  assign CAN_FIRE_RL_uart_uart_receive_stop_first_bit =
	     uart_uart_rRecvState == 3'd5 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_receive_stop_first_bit =
	     CAN_FIRE_RL_uart_uart_receive_stop_first_bit ;

  // rule RL_uart_uart_receive_bit_counter
  assign CAN_FIRE_RL_uart_uart_receive_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_receive_bit_counter = 1'd1 ;

  // rule RL_uart_uart_receive_stop_last_bit
  assign CAN_FIRE_RL_uart_uart_receive_stop_last_bit =
	     uart_uart_rRecvState == 3'd6 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_receive_stop_last_bit =
	     CAN_FIRE_RL_uart_uart_receive_stop_last_bit ;

  // rule RL_uart_uart_receive_buffer_shift
  assign CAN_FIRE_RL_uart_uart_receive_buffer_shift =
	     uart_uart_rRecvState == 3'd3 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_receive_buffer_shift =
	     CAN_FIRE_RL_uart_uart_receive_buffer_shift ;

  // rule RL_uart_uart_transmit_wait_for_start_command
  assign CAN_FIRE_RL_uart_uart_transmit_wait_for_start_command =
	     uart_uart_rXmitState == 4'd0 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command =
	     CAN_FIRE_RL_uart_uart_transmit_wait_for_start_command ;

  // rule RL_uart_uart_rl_delay_control
  assign CAN_FIRE_RL_uart_uart_rl_delay_control =
	     uart_uart_rXmitState == 4'd1 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_rl_delay_control =
	     CAN_FIRE_RL_uart_uart_rl_delay_control ;

  // rule RL_uart_uart_transmit_send_start_bit
  assign CAN_FIRE_RL_uart_uart_transmit_send_start_bit =
	     uart_uart_rXmitState == 4'd2 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_start_bit =
	     CAN_FIRE_RL_uart_uart_transmit_send_start_bit ;

  // rule RL_uart_uart_transmit_wait_1_bit_cell_time
  assign CAN_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time =
	     uart_uart_rXmitState == 4'd3 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time =
	     CAN_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ;

  // rule RL_uart_uart_transmit_bit_counter
  assign CAN_FIRE_RL_uart_uart_transmit_bit_counter = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_transmit_bit_counter = 1'd1 ;

  // rule RL_uart_uart_transmit_shift_next_bit
  assign CAN_FIRE_RL_uart_uart_transmit_shift_next_bit =
	     uart_uart_rXmitState == 4'd4 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_transmit_shift_next_bit =
	     CAN_FIRE_RL_uart_uart_transmit_shift_next_bit ;

  // rule RL_uart_uart_transmit_buffer_shift
  assign CAN_FIRE_RL_uart_uart_transmit_buffer_shift =
	     !CAN_FIRE_RL_uart_uart_transmit_buffer_load &&
	     CAN_FIRE_RL_uart_uart_transmit_shift_next_bit ;
  assign WILL_FIRE_RL_uart_uart_transmit_buffer_shift =
	     CAN_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // rule RL_uart_uart_transmit_send_parity_bit
  assign CAN_FIRE_RL_uart_uart_transmit_send_parity_bit =
	     uart_uart_rXmitState == 4'd8 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_parity_bit =
	     CAN_FIRE_RL_uart_uart_transmit_send_parity_bit ;

  // rule RL_uart_uart_transmit_buffer_load
  assign CAN_FIRE_RL_uart_uart_transmit_buffer_load =
	     MUX_uart_uart_rXmitState_write_1__SEL_1 ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     uart_uart_fifoXmit_ifc_rDataCount != 5'd0 &&
	     uart_uart_out_enable ;
  assign WILL_FIRE_RL_uart_uart_transmit_buffer_load =
	     CAN_FIRE_RL_uart_uart_transmit_buffer_load ;

  // rule RL_uart_rl_set_charsize
  assign CAN_FIRE_RL_uart_rl_set_charsize = 1'd1 ;
  assign WILL_FIRE_RL_uart_rl_set_charsize = 1'd1 ;

  // rule RL_uart_uart_transmit_send_stop_bit
  assign CAN_FIRE_RL_uart_uart_transmit_send_stop_bit =
	     uart_uart_rXmitState == 4'd5 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_stop_bit =
	     CAN_FIRE_RL_uart_uart_transmit_send_stop_bit ;

  // rule RL_uart_uart_rl_update_fifo_almost_full
  assign CAN_FIRE_RL_uart_uart_rl_update_fifo_almost_full = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_rl_update_fifo_almost_full = 1'd1 ;

  // rule RL_uart_uart_transmit_send_stop_bit1_5
  assign CAN_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 =
	     uart_uart_rXmitState == 4'd6 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 =
	     CAN_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ;

  // rule RL_uart_uart_transmit_send_stop_bit2
  assign CAN_FIRE_RL_uart_uart_transmit_send_stop_bit2 =
	     uart_uart_rXmitState == 4'd7 &&
	     !uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 =
	     CAN_FIRE_RL_uart_uart_transmit_send_stop_bit2 ;

  // rule RL_uart_uart_transmit_bit_cell_time_counter
  assign CAN_FIRE_RL_uart_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter ;
  assign WILL_FIRE_RL_uart_uart_transmit_bit_cell_time_counter =
	     CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter ;

  // rule RL_uart_uart_fifoRecv_ifc_update
  assign CAN_FIRE_RL_uart_uart_fifoRecv_ifc_update = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_fifoRecv_ifc_update = 1'd1 ;

  // rule RL_uart_uart_fifoXmit_ifc_update
  assign CAN_FIRE_RL_uart_uart_fifoXmit_ifc_update = 1'd1 ;
  assign WILL_FIRE_RL_uart_uart_fifoXmit_ifc_update = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_uart_uart_error_status_register_write_1__SEL_1 =
	     EN_write_req && write_req_addr[5:0] == 6'h0C ;
  assign MUX_uart_uart_out_enable_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     uart_uart_fifoXmit_ifc_rDataCount == 5'd0 &&
	     uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280 ;
  assign MUX_uart_uart_rRecvState_write_1__SEL_6 =
	     WILL_FIRE_RL_uart_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_uart_receive_sample_pin ;
  assign MUX_uart_uart_rXmitDataOut_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ;
  assign MUX_uart_uart_rXmitDataOut_write_1__SEL_4 =
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command ;
  assign MUX_uart_uart_rXmitState_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_uart_rl_delay_control &&
	     uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280 ;
  assign MUX_uart_uart_rg_delay_count_write_1__SEL_1 =
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     (uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280 ||
	      uart_uart_out_enable ||
	      uart_uart_fifoXmit_ifc_rDataCount != 5'd0) ;
  assign MUX_uart_uart_rg_delay_count_write_1__SEL_2 =
	     WILL_FIRE_RL_uart_uart_rl_delay_control &&
	     !uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280 ;
  assign MUX_uart_uart_error_status_register_write_1__VAL_1 =
	     uart_uart_error_status_register & x__h21670[7:4] ;
  assign MUX_uart_uart_error_status_register_write_1__VAL_2 =
	     { x__h8568 == 8'd0 && !uart_uart_rRecvData_dD_OUT,
	       !uart_uart_rRecvData_dD_OUT,
	       uart_uart_fifoRecv_ifc_rDataCount == 5'd16,
	       uart_rg_parity == 2'd1 &&
	       !uart_uart_vrRecvBuffer_0_45_XOR_uart_uart_vrRe_ETC___d159 ||
	       uart_rg_parity == 2'd2 &&
	       uart_uart_vrRecvBuffer_0_45_XOR_uart_uart_vrRe_ETC___d159 } ;
  assign MUX_uart_uart_fifo_almost_full_write_1__VAL_2 =
	     uart_uart_fifo_almost_full & x__h21670[8] ;
  assign MUX_uart_uart_rRecvState_write_1__VAL_1 =
	     uart_uart_rRecvData_dD_OUT ? 3'd0 : 3'd1 ;
  assign MUX_uart_uart_rRecvState_write_1__VAL_2 =
	     (uart_uart_rRecvCellCount == 4'h4) ?
	       (uart_uart_rRecvData_dD_OUT ? 3'd0 : 3'd2) :
	       3'd1 ;
  assign MUX_uart_uart_rRecvState_write_1__VAL_3 =
	     (uart_uart_rRecvBitCount == uart_rg_charsize) ?
	       ((uart_rg_parity == 2'd0) ?
		  ((uart_rg_stopbits == 2'd0) ? 3'd6 : 3'd5) :
		  3'd4) :
	       IF_uart_uart_rRecvBitCount_7_EQ_uart_rg_charsi_ETC___d129 ;
  assign MUX_uart_uart_rRecvState_write_1__VAL_4 =
	     uart_uart_rRecvData_dD_OUT ? 3'd2 : 3'd0 ;
  assign MUX_uart_uart_rXmitDataOut_write_1__VAL_2 =
	     (uart_rg_parity == 2'd1) ?
	       x__h15612 :
	       uart_rg_parity == 2'd2 && uart_uart_rXmitParity ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_2 =
	     (uart_uart_fifoXmit_ifc_rDataCount == 5'd0) ?
	       4'd0 :
	       (uart_uart_out_enable ? 4'd2 : 4'd1) ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_3 =
	     (uart_uart_rXmitCellCount == 4'hF) ? 4'd3 : 4'd2 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_4 =
	     (uart_uart_rXmitCellCount == 4'hF) ?
	       ((uart_uart_rXmitBitCount_20_EQ_uart_rg_charsize_ETC___d299 &&
		 uart_rg_parity == 2'd0) ?
		  4'd5 :
		  ((uart_uart_rXmitBitCount_20_EQ_uart_rg_charsize_ETC___d299 &&
		    uart_rg_parity != 2'd0) ?
		     4'd8 :
		     4'd4)) :
	       4'd3 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_5 =
	     (uart_uart_rXmitCellCount == 4'hF) ? 4'd5 : 4'd8 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_6 =
	     (uart_uart_rXmitCellCount == 4'hF && uart_rg_stopbits == 2'd0) ?
	       4'd0 :
	       ((uart_uart_rXmitCellCount == 4'hF &&
		 uart_rg_stopbits == 2'd2) ?
		  4'd7 :
		  ((uart_uart_rXmitCellCount == 4'hF &&
		    uart_rg_stopbits == 2'd1) ?
		     4'd6 :
		     4'd5)) ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_7 =
	     (uart_uart_rXmitCellCount == 4'h7) ? 4'd0 : 4'd6 ;
  assign MUX_uart_uart_rXmitState_write_1__VAL_8 =
	     (uart_uart_rXmitCellCount == 4'hF) ? 4'd0 : 4'd7 ;
  assign MUX_uart_uart_rg_delay_count_write_1__VAL_1 =
	     (uart_uart_fifoXmit_ifc_rDataCount == 5'd0) ?
	       (uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280 ?
		  16'd0 :
		  x__h14788) :
	       16'd0 ;

  // inlined wires
  assign uart_uart_fifoRecv_ifc_rwDeqCount_whas =
	     EN_read_req && read_req_addr[5:0] == 6'h08 &&
	     uart_uart_fifoRecv_ifc_rDataCount >= b__h16503 ;
  assign uart_uart_fifoRecv_ifc_rwEnqCount_whas =
	     WILL_FIRE_RL_uart_uart_receive_stop_last_bit &&
	     uart_uart_fifoRecv_ifc_rDataAvail != 5'd0 ;
  assign uart_uart_fifoXmit_ifc_rwDeqCount_whas =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load &&
	     uart_uart_fifoXmit_ifc_rDataCount != 5'd0 ;
  assign uart_uart_fifoXmit_ifc_rwEnqCount_whas =
	     EN_write_req && write_req_addr[5:0] == 6'h04 &&
	     uart_uart_fifoXmit_ifc_rDataAvail >= b__h21628 ;
  assign uart_uart_pwRecvCellCountReset_whas =
	     WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell &&
	     uart_uart_rRecvCellCount == 4'h4 ||
	     WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit ;
  assign uart_uart_pwRecvResetBitCount_whas =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     uart_uart_rRecvData_dD_OUT ;
  assign uart_uart_pwRecvEnableBitCount_whas =
	     WILL_FIRE_RL_uart_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_uart_receive_sample_pin ;
  assign uart_uart_pwXmitCellCountReset_whas =
	     WILL_FIRE_RL_uart_uart_rl_delay_control &&
	     uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280 ||
	     _dand2uart_uart_pwXmitCellCountReset_EN_wset ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 &&
	     uart_uart_rXmitCellCount == 4'h7 ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     uart_uart_fifoXmit_ifc_rDataCount != 5'd0 &&
	     uart_uart_out_enable ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit &&
	     uart_uart_rXmitCellCount == 4'hF &&
	     (uart_rg_stopbits == 2'd0 || uart_rg_stopbits == 2'd2 ||
	      uart_rg_stopbits == 2'd1) ;
  assign uart_uart_pwXmitResetBitCount_whas =
	     WILL_FIRE_RL_uart_uart_rl_delay_control ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command ;
  assign uart_uart_pwXmitEnableBitCount_whas =
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time &&
	     uart_uart_rXmitCellCount == 4'hF &&
	     (!uart_uart_rXmitBitCount_20_EQ_uart_rg_charsize_ETC___d299 ||
	      uart_rg_parity != 2'd0) &&
	     (!uart_uart_rXmitBitCount_20_EQ_uart_rg_charsize_ETC___d299 ||
	      uart_rg_parity == 2'd0) ;
  assign uart_uart_wr_tx_can_take_inp_wget =
	     uart_rg_tx_dma_threshold == 3'd4 &&
	     uart_uart_fifoXmit_ifc_rDataCount <= 5'd8 ||
	     uart_rg_tx_dma_threshold == 3'd3 &&
	     uart_uart_fifoXmit_ifc_rDataAvail >= 5'd4 ||
	     uart_rg_tx_dma_threshold == 3'd2 &&
	     uart_uart_fifoXmit_ifc_rDataAvail >= 5'd2 ||
	     uart_rg_tx_dma_threshold == 3'd1 &&
	     uart_uart_fifoXmit_ifc_rDataAvail != 5'd0 ;
  assign uart_uart_wr_rx_outp_ready_wget =
	     uart_rg_rx_dma_threshold == 3'd4 &&
	     uart_uart_fifoRecv_ifc_rDataCount >= 5'd8 ||
	     uart_rg_rx_dma_threshold == 3'd3 &&
	     uart_uart_fifoRecv_ifc_rDataCount >= 5'd4 ||
	     uart_rg_rx_dma_threshold == 3'd2 &&
	     uart_uart_fifoRecv_ifc_rDataCount >= 5'd2 ||
	     uart_rg_rx_dma_threshold == 3'd1 &&
	     uart_uart_fifoRecv_ifc_rDataCount != 5'd0 ;

  // register uart_baud_value
  assign uart_baud_value_D_IN = x__h21670[15:0] ;
  assign uart_baud_value_EN = EN_write_req && write_req_addr[5:0] == 6'h0 ;

  // register uart_rg_char_decide
  assign uart_rg_char_decide_D_IN = x__h21670[6:5] ;
  assign uart_rg_char_decide_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h14 ;

  // register uart_rg_charsize
  always@(uart_rg_char_decide)
  begin
    case (uart_rg_char_decide)
      2'd0: uart_rg_charsize_D_IN = 6'd8;
      2'd1: uart_rg_charsize_D_IN = 6'd7;
      2'd2: uart_rg_charsize_D_IN = 6'd6;
      2'd3: uart_rg_charsize_D_IN = 6'd5;
    endcase
  end
  assign uart_rg_charsize_EN = 1'b1 ;

  // register uart_rg_delay_control
  assign uart_rg_delay_control_D_IN = x__h21670[15:0] ;
  assign uart_rg_delay_control_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h10 ;

  // register uart_rg_interrupt_en
  assign uart_rg_interrupt_en_D_IN = { 7'd0, x__h21670[8:0] } ;
  assign uart_rg_interrupt_en_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h18 ;

  // register uart_rg_parity
  assign uart_rg_parity_D_IN = x__h21670[4:3] ;
  assign uart_rg_parity_EN = EN_write_req && write_req_addr[5:0] == 6'h14 ;

  // register uart_rg_pullup_enable
  assign uart_rg_pullup_enable_D_IN = x__h21670[13] ;
  assign uart_rg_pullup_enable_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h14 ;

  // register uart_rg_rx_dma_threshold
  assign uart_rg_rx_dma_threshold_D_IN = x__h21670[12:10] ;
  assign uart_rg_rx_dma_threshold_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h14 ;

  // register uart_rg_rx_threshold
  assign uart_rg_rx_threshold_D_IN = x__h21670[4:0] ;
  assign uart_rg_rx_threshold_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h20 ;

  // register uart_rg_stopbits
  assign uart_rg_stopbits_D_IN = x__h21670[2:1] ;
  assign uart_rg_stopbits_EN = EN_write_req && write_req_addr[5:0] == 6'h14 ;

  // register uart_rg_tx_dma_threshold
  assign uart_rg_tx_dma_threshold_D_IN = x__h21670[9:7] ;
  assign uart_rg_tx_dma_threshold_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h14 ;

  // register uart_uart_error_status_register
  assign uart_uart_error_status_register_D_IN =
	     MUX_uart_uart_error_status_register_write_1__SEL_1 ?
	       MUX_uart_uart_error_status_register_write_1__VAL_1 :
	       MUX_uart_uart_error_status_register_write_1__VAL_2 ;
  assign uart_uart_error_status_register_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h0C ||
	     WILL_FIRE_RL_uart_uart_receive_stop_last_bit ;

  // register uart_uart_fifoRecv_ifc_rDataAvail
  assign uart_uart_fifoRecv_ifc_rDataAvail_D_IN =
	     uart_uart_fifoRecv_ifc_rDataAvail + b__h1755 - b__h2128 ;
  assign uart_uart_fifoRecv_ifc_rDataAvail_EN = 1'd1 ;

  // register uart_uart_fifoRecv_ifc_rDataCount
  assign uart_uart_fifoRecv_ifc_rDataCount_D_IN = value__h1937 + b__h2128 ;
  assign uart_uart_fifoRecv_ifc_rDataCount_EN = 1'd1 ;

  // register uart_uart_fifoRecv_ifc_rStorage
  assign uart_uart_fifoRecv_ifc_rStorage_D_IN = nextStorage__h1617 ;
  assign uart_uart_fifoRecv_ifc_rStorage_EN = 1'd1 ;

  // register uart_uart_fifoRecv_ifc_rStorageMask
  assign uart_uart_fifoRecv_ifc_rStorageMask_D_IN = nextMask__h1618 ;
  assign uart_uart_fifoRecv_ifc_rStorageMask_EN = 1'd1 ;

  // register uart_uart_fifoXmit_ifc_rDataAvail
  assign uart_uart_fifoXmit_ifc_rDataAvail_D_IN =
	     uart_uart_fifoXmit_ifc_rDataAvail + b__h3894 - b__h4267 ;
  assign uart_uart_fifoXmit_ifc_rDataAvail_EN = 1'd1 ;

  // register uart_uart_fifoXmit_ifc_rDataCount
  assign uart_uart_fifoXmit_ifc_rDataCount_D_IN = value__h4076 + b__h4267 ;
  assign uart_uart_fifoXmit_ifc_rDataCount_EN = 1'd1 ;

  // register uart_uart_fifoXmit_ifc_rStorage
  assign uart_uart_fifoXmit_ifc_rStorage_D_IN = nextStorage__h3773 ;
  assign uart_uart_fifoXmit_ifc_rStorage_EN = 1'd1 ;

  // register uart_uart_fifoXmit_ifc_rStorageMask
  assign uart_uart_fifoXmit_ifc_rStorageMask_D_IN = nextMask__h3774 ;
  assign uart_uart_fifoXmit_ifc_rStorageMask_EN = 1'd1 ;

  // register uart_uart_fifo_almost_full
  assign uart_uart_fifo_almost_full_D_IN =
	     NOT_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_ua_ETC___d170 ||
	     MUX_uart_uart_fifo_almost_full_write_1__VAL_2 ;
  assign uart_uart_fifo_almost_full_EN =
	     EN_write_req && write_req_addr[5:0] == 6'h0C ||
	     NOT_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_ua_ETC___d170 ;

  // register uart_uart_out_enable
  assign uart_uart_out_enable_D_IN =
	     !MUX_uart_uart_out_enable_write_1__SEL_1 ;
  assign uart_uart_out_enable_EN =
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     uart_uart_fifoXmit_ifc_rDataCount == 5'd0 &&
	     uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280 ||
	     WILL_FIRE_RL_uart_uart_rl_delay_control ;

  // register uart_uart_rRecvBitCount
  assign uart_uart_rRecvBitCount_D_IN =
	     uart_uart_pwRecvResetBitCount_whas ? 6'd0 : x__h7065 ;
  assign uart_uart_rRecvBitCount_EN =
	     uart_uart_pwRecvResetBitCount_whas ||
	     uart_uart_pwRecvEnableBitCount_whas ;

  // register uart_uart_rRecvCellCount
  assign uart_uart_rRecvCellCount_D_IN =
	     uart_uart_pwRecvCellCountReset_whas ? 4'd0 : x__h5361 ;
  assign uart_uart_rRecvCellCount_EN =
	     CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter ;

  // register uart_uart_rRecvParity
  assign uart_uart_rRecvParity_D_IN = uart_uart_rRecvData_dD_OUT ;
  assign uart_uart_rRecvParity_EN = CAN_FIRE_RL_uart_uart_receive_parity_bit ;

  // register uart_uart_rRecvState
  always@(WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit or
	  MUX_uart_uart_rRecvState_write_1__VAL_1 or
	  WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell or
	  MUX_uart_uart_rRecvState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample or
	  MUX_uart_uart_rRecvState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_uart_receive_stop_first_bit or
	  MUX_uart_uart_rRecvState_write_1__VAL_4 or
	  WILL_FIRE_RL_uart_uart_receive_stop_last_bit or
	  MUX_uart_uart_rRecvState_write_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_1;
      WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_2;
      WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_3;
      WILL_FIRE_RL_uart_uart_receive_stop_first_bit:
	  uart_uart_rRecvState_D_IN = MUX_uart_uart_rRecvState_write_1__VAL_4;
      WILL_FIRE_RL_uart_uart_receive_stop_last_bit:
	  uart_uart_rRecvState_D_IN = 3'd0;
      MUX_uart_uart_rRecvState_write_1__SEL_6:
	  uart_uart_rRecvState_D_IN = 3'd2;
      default: uart_uart_rRecvState_D_IN = 3'b0 /* unspecified value */ ;
    endcase
  end
  assign uart_uart_rRecvState_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit ||
	     WILL_FIRE_RL_uart_uart_receive_find_center_of_bit_cell ||
	     WILL_FIRE_RL_uart_uart_receive_wait_bit_cell_time_for_sample ||
	     WILL_FIRE_RL_uart_uart_receive_stop_first_bit ||
	     WILL_FIRE_RL_uart_uart_receive_stop_last_bit ||
	     WILL_FIRE_RL_uart_uart_receive_parity_bit ||
	     WILL_FIRE_RL_uart_uart_receive_sample_pin ;

  // register uart_uart_rXmitBitCount
  assign uart_uart_rXmitBitCount_D_IN =
	     uart_uart_pwXmitResetBitCount_whas ? 6'd0 : x__h11114 ;
  assign uart_uart_rXmitBitCount_EN =
	     uart_uart_pwXmitResetBitCount_whas ||
	     uart_uart_pwXmitEnableBitCount_whas ;

  // register uart_uart_rXmitCellCount
  assign uart_uart_rXmitCellCount_D_IN =
	     uart_uart_pwXmitCellCountReset_whas ? 4'd0 : x__h11088 ;
  assign uart_uart_rXmitCellCount_EN =
	     CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter ;

  // register uart_uart_rXmitDataOut
  always@(MUX_uart_uart_rXmitDataOut_write_1__SEL_1 or
	  uart_uart_vrXmitBuffer_0 or
	  WILL_FIRE_RL_uart_uart_transmit_send_parity_bit or
	  MUX_uart_uart_rXmitDataOut_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_uart_transmit_send_start_bit or
	  MUX_uart_uart_rXmitDataOut_write_1__SEL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_uart_uart_rXmitDataOut_write_1__SEL_1:
	  uart_uart_rXmitDataOut_D_IN = uart_uart_vrXmitBuffer_0;
      WILL_FIRE_RL_uart_uart_transmit_send_parity_bit:
	  uart_uart_rXmitDataOut_D_IN =
	      MUX_uart_uart_rXmitDataOut_write_1__VAL_2;
      WILL_FIRE_RL_uart_uart_transmit_send_start_bit:
	  uart_uart_rXmitDataOut_D_IN = 1'b0;
      MUX_uart_uart_rXmitDataOut_write_1__SEL_4:
	  uart_uart_rXmitDataOut_D_IN = 1'b1;
      default: uart_uart_rXmitDataOut_D_IN = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign uart_uart_rXmitDataOut_EN =
	     WILL_FIRE_RL_uart_uart_transmit_shift_next_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command ;

  // register uart_uart_rXmitParity
  assign uart_uart_rXmitParity_D_IN =
	     z__h12760 ^
	     IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246[7] ;
  assign uart_uart_rXmitParity_EN =
	     CAN_FIRE_RL_uart_uart_transmit_buffer_load ;

  // register uart_uart_rXmitState
  always@(MUX_uart_uart_rXmitState_write_1__SEL_1 or
	  WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command or
	  MUX_uart_uart_rXmitState_write_1__VAL_2 or
	  WILL_FIRE_RL_uart_uart_transmit_send_start_bit or
	  MUX_uart_uart_rXmitState_write_1__VAL_3 or
	  WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time or
	  MUX_uart_uart_rXmitState_write_1__VAL_4 or
	  WILL_FIRE_RL_uart_uart_transmit_send_parity_bit or
	  MUX_uart_uart_rXmitState_write_1__VAL_5 or
	  WILL_FIRE_RL_uart_uart_transmit_send_stop_bit or
	  MUX_uart_uart_rXmitState_write_1__VAL_6 or
	  WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 or
	  MUX_uart_uart_rXmitState_write_1__VAL_7 or
	  WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 or
	  MUX_uart_uart_rXmitState_write_1__VAL_8 or
	  WILL_FIRE_RL_uart_uart_transmit_shift_next_bit)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_uart_uart_rXmitState_write_1__SEL_1:
	  uart_uart_rXmitState_D_IN = 4'd2;
      WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_2;
      WILL_FIRE_RL_uart_uart_transmit_send_start_bit:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_3;
      WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_4;
      WILL_FIRE_RL_uart_uart_transmit_send_parity_bit:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_5;
      WILL_FIRE_RL_uart_uart_transmit_send_stop_bit:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_6;
      WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_7;
      WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2:
	  uart_uart_rXmitState_D_IN = MUX_uart_uart_rXmitState_write_1__VAL_8;
      WILL_FIRE_RL_uart_uart_transmit_shift_next_bit:
	  uart_uart_rXmitState_D_IN = 4'd3;
      default: uart_uart_rXmitState_D_IN = 4'b0 /* unspecified value */ ;
    endcase
  end
  assign uart_uart_rXmitState_EN =
	     WILL_FIRE_RL_uart_uart_rl_delay_control &&
	     uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280 ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command ||
	     WILL_FIRE_RL_uart_uart_transmit_send_start_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ||
	     WILL_FIRE_RL_uart_uart_transmit_send_parity_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit1_5 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	     WILL_FIRE_RL_uart_uart_transmit_shift_next_bit ;

  // register uart_uart_rg_delay_count
  always@(MUX_uart_uart_rg_delay_count_write_1__SEL_1 or
	  MUX_uart_uart_rg_delay_count_write_1__VAL_1 or
	  MUX_uart_uart_rg_delay_count_write_1__SEL_2 or
	  x__h14788 or WILL_FIRE_RL_uart_uart_transmit_send_start_bit)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_uart_uart_rg_delay_count_write_1__SEL_1:
	  uart_uart_rg_delay_count_D_IN =
	      MUX_uart_uart_rg_delay_count_write_1__VAL_1;
      MUX_uart_uart_rg_delay_count_write_1__SEL_2:
	  uart_uart_rg_delay_count_D_IN = x__h14788;
      WILL_FIRE_RL_uart_uart_transmit_send_start_bit:
	  uart_uart_rg_delay_count_D_IN = 16'd0;
      default: uart_uart_rg_delay_count_D_IN = 16'b0 /* unspecified value */ ;
    endcase
  end
  assign uart_uart_rg_delay_count_EN =
	     WILL_FIRE_RL_uart_uart_transmit_wait_for_start_command &&
	     (uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280 ||
	      uart_uart_out_enable ||
	      uart_uart_fifoXmit_ifc_rDataCount != 5'd0) ||
	     WILL_FIRE_RL_uart_uart_rl_delay_control &&
	     !uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280 ||
	     WILL_FIRE_RL_uart_uart_transmit_send_start_bit ;

  // register uart_uart_vrRecvBuffer_0
  assign uart_uart_vrRecvBuffer_0_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_1 ;
  assign uart_uart_vrRecvBuffer_0_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData_dD_OUT ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_1
  assign uart_uart_vrRecvBuffer_1_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_2 ;
  assign uart_uart_vrRecvBuffer_1_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData_dD_OUT ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_2
  assign uart_uart_vrRecvBuffer_2_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_3 ;
  assign uart_uart_vrRecvBuffer_2_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData_dD_OUT ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_3
  assign uart_uart_vrRecvBuffer_3_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_4 ;
  assign uart_uart_vrRecvBuffer_3_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData_dD_OUT ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_4
  assign uart_uart_vrRecvBuffer_4_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_5 ;
  assign uart_uart_vrRecvBuffer_4_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData_dD_OUT ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_5
  assign uart_uart_vrRecvBuffer_5_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_6 ;
  assign uart_uart_vrRecvBuffer_5_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData_dD_OUT ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_6
  assign uart_uart_vrRecvBuffer_6_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_vrRecvBuffer_7 ;
  assign uart_uart_vrRecvBuffer_6_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData_dD_OUT ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrRecvBuffer_7
  assign uart_uart_vrRecvBuffer_7_D_IN =
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	     uart_uart_rRecvData_dD_OUT ;
  assign uart_uart_vrRecvBuffer_7_EN =
	     WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	     !uart_uart_rRecvData_dD_OUT ||
	     WILL_FIRE_RL_uart_uart_receive_buffer_shift ;

  // register uart_uart_vrXmitBuffer_0
  assign uart_uart_vrXmitBuffer_0_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_ifc_rStorage[0] :
	       uart_uart_vrXmitBuffer_1 ;
  assign uart_uart_vrXmitBuffer_0_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_1
  assign uart_uart_vrXmitBuffer_1_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_ifc_rStorage[1] :
	       uart_uart_vrXmitBuffer_2 ;
  assign uart_uart_vrXmitBuffer_1_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_2
  assign uart_uart_vrXmitBuffer_2_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_ifc_rStorage[2] :
	       uart_uart_vrXmitBuffer_3 ;
  assign uart_uart_vrXmitBuffer_2_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_3
  assign uart_uart_vrXmitBuffer_3_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_ifc_rStorage[3] :
	       uart_uart_vrXmitBuffer_4 ;
  assign uart_uart_vrXmitBuffer_3_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_4
  assign uart_uart_vrXmitBuffer_4_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_ifc_rStorage[4] :
	       uart_uart_vrXmitBuffer_5 ;
  assign uart_uart_vrXmitBuffer_4_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_5
  assign uart_uart_vrXmitBuffer_5_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_ifc_rStorage[5] :
	       uart_uart_vrXmitBuffer_6 ;
  assign uart_uart_vrXmitBuffer_5_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_6
  assign uart_uart_vrXmitBuffer_6_D_IN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ?
	       uart_uart_fifoXmit_ifc_rStorage[6] :
	       uart_uart_vrXmitBuffer_7 ;
  assign uart_uart_vrXmitBuffer_6_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // register uart_uart_vrXmitBuffer_7
  assign uart_uart_vrXmitBuffer_7_D_IN =
	     !WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     uart_uart_fifoXmit_ifc_rStorage[7] ;
  assign uart_uart_vrXmitBuffer_7_EN =
	     WILL_FIRE_RL_uart_uart_transmit_buffer_load ||
	     WILL_FIRE_RL_uart_uart_transmit_buffer_shift ;

  // submodule uart_uart_baudGen_rBaudCounter
  assign uart_uart_baudGen_rBaudCounter_DATA_A = 16'd1 ;
  assign uart_uart_baudGen_rBaudCounter_DATA_B = 16'h0 ;
  assign uart_uart_baudGen_rBaudCounter_DATA_C = 16'h0 ;
  assign uart_uart_baudGen_rBaudCounter_DATA_F = 16'd0 ;
  assign uart_uart_baudGen_rBaudCounter_ADDA =
	     uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 ;
  assign uart_uart_baudGen_rBaudCounter_ADDB = 1'b0 ;
  assign uart_uart_baudGen_rBaudCounter_SETC = 1'b0 ;
  assign uart_uart_baudGen_rBaudCounter_SETF =
	     CAN_FIRE_RL_uart_uart_receive_bit_cell_time_counter ;

  // submodule uart_uart_rRecvData
  assign uart_uart_rRecvData_sD_IN = io_SIN ;
  assign uart_uart_rRecvData_sEN = 1'd1 ;

  // remaining internal signals
  assign IF_IF_read_req_size_EQ_2_56_THEN_4_ELSE_0_CONC_ETC___d397 =
	     { CASE_value6504_0_IF_uart_uart_fifoRecv_ifc_rDa_ETC__q1,
	       CASE_value6504_0_IF_uart_uart_fifoRecv_ifc_rDa_ETC__q2 } ;
  assign IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d382 =
	     uart_uart_fifoRecv_ifc_rStorage[7:0] >> x__h18133 ;
  assign IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d386 =
	     uart_uart_fifoRecv_ifc_rStorage[15:8] >> x__h18133 ;
  assign IF_uart_uart_rRecvBitCount_7_EQ_uart_rg_charsi_ETC___d129 =
	     (uart_uart_rRecvBitCount == y__h8232) ?
	       ((uart_rg_parity == 2'd0 || uart_rg_stopbits == 2'd0) ?
		  3'd6 :
		  3'd5) :
	       ((uart_uart_rRecvBitCount == y__h8254) ? 3'd6 : 3'd3) ;
  assign NOT_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_ua_ETC___d170 =
	     uart_uart_fifoRecv_ifc_rDataCount >= uart_rg_rx_threshold ;
  assign _1_SL_IF_write_req_size_EQ_2_41_THEN_4_ELSE_0_C_ETC___d458 =
	     (4'd1 << value__h21629) - 4'd1 ;
  assign _dand2uart_uart_pwXmitCellCountReset_EN_wset =
	     (WILL_FIRE_RL_uart_uart_transmit_send_stop_bit2 ||
	      WILL_FIRE_RL_uart_uart_transmit_send_parity_bit ||
	      WILL_FIRE_RL_uart_uart_transmit_wait_1_bit_cell_time ||
	      WILL_FIRE_RL_uart_uart_transmit_send_start_bit) &&
	     uart_uart_rXmitCellCount == 4'hF ;
  assign _theResult___fst__h19805 =
	     { 3'd0,
	       uart_rg_rx_threshold,
	       3'd0,
	       uart_rg_rx_threshold,
	       3'd0,
	       uart_rg_rx_threshold,
	       3'd0,
	       uart_rg_rx_threshold } ;
  assign a__h16635 =
	     {2{IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424[15:0]}} ;
  assign a__h16637 =
	     {4{IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424[7:0]}} ;
  assign b__h16503 = { 2'd0, value__h16504 } ;
  assign b__h1755 = uart_uart_fifoRecv_ifc_rwDeqCount_whas ? b__h1787 : 5'd0 ;
  assign b__h1787 = b__h16503 ;
  assign b__h2128 = uart_uart_fifoRecv_ifc_rwEnqCount_whas ? 5'd1 : 5'd0 ;
  assign b__h21628 = { 2'd0, value__h21629 } ;
  assign b__h3894 = uart_uart_fifoXmit_ifc_rwDeqCount_whas ? 5'd1 : 5'd0 ;
  assign b__h4267 = uart_uart_fifoXmit_ifc_rwEnqCount_whas ? b__h4299 : 5'd0 ;
  assign b__h4299 = b__h21628 ;
  assign enqData__h1615 = x__h1873 << x__h1981 ;
  assign enqData__h3771 = x__h4012 << x__h4120 ;
  assign enqMask__h1616 = x__h1989 << x__h1981 ;
  assign enqMask__h3772 = x__h4128 << x__h4120 ;
  assign nextMask__h1610 = uart_uart_fifoRecv_ifc_rStorageMask >> x__h1837 ;
  assign nextMask__h1618 = nextMask__h1610 | enqMask__h1616 ;
  assign nextMask__h3766 = uart_uart_fifoXmit_ifc_rStorageMask >> x__h3976 ;
  assign nextMask__h3774 = nextMask__h3766 | enqMask__h3772 ;
  assign nextStorage__h1609 = uart_uart_fifoRecv_ifc_rStorage >> x__h1837 ;
  assign nextStorage__h1617 = x__h1686 | y__h1687 ;
  assign nextStorage__h3765 = uart_uart_fifoXmit_ifc_rStorage >> x__h3976 ;
  assign nextStorage__h3773 = x__h3839 | y__h3840 ;
  assign parity_data__h12800 =
	     { uart_uart_fifoXmit_ifc_rStorage[6:0], 1'd0 } ;
  assign parity_data__h12805 =
	     { uart_uart_fifoXmit_ifc_rStorage[5:0], 2'd0 } ;
  assign parity_data__h12810 =
	     { uart_uart_fifoXmit_ifc_rStorage[4:0], 3'd0 } ;
  assign return_data__h16913 =
	     { 5'd0,
	       uart_uart_wr_tx_can_take_inp_wget,
	       uart_uart_wr_rx_outp_ready_wget,
	       x_error_status__h16125,
	       uart_uart_fifoRecv_ifc_rDataCount == 5'd16,
	       uart_uart_fifoRecv_ifc_rDataCount != 5'd0,
	       uart_uart_fifoXmit_ifc_rDataCount == 5'd16,
	       uart_uart_fifoXmit_ifc_rDataCount == 5'd0 &&
	       uart_uart_rXmitState == 4'd0,
	       5'd0,
	       uart_uart_wr_tx_can_take_inp_wget,
	       uart_uart_wr_rx_outp_ready_wget,
	       x_error_status__h16125,
	       uart_uart_fifoRecv_ifc_rDataCount == 5'd16,
	       uart_uart_fifoRecv_ifc_rDataCount != 5'd0,
	       uart_uart_fifoXmit_ifc_rDataCount == 5'd16,
	       uart_uart_fifoXmit_ifc_rDataCount == 5'd0 &&
	       uart_uart_rXmitState == 4'd0 } ;
  assign return_data__h18522 =
	     { 2'd0,
	       uart_rg_pullup_enable,
	       uart_rg_rx_dma_threshold,
	       uart_rg_tx_dma_threshold,
	       uart_rg_char_decide,
	       uart_rg_parity,
	       uart_rg_stopbits,
	       3'b0,
	       uart_rg_pullup_enable,
	       uart_rg_rx_dma_threshold,
	       uart_rg_tx_dma_threshold,
	       uart_rg_char_decide,
	       uart_rg_parity,
	       uart_rg_stopbits,
	       1'b0 } ;
  assign return_data__h18849 = {2{uart_baud_value}} ;
  assign return_data__h19168 = {2{uart_rg_delay_control}} ;
  assign return_data__h19487 = {2{uart_rg_interrupt_en}} ;
  assign uart_uart_baudGen_rBaudCounter_value_PLUS_1_6__ETC___d78 =
	     uart_uart_baudGen_rBaudCounter_Q_OUT + 16'd1 < uart_baud_value ;
  assign uart_uart_rXmitBitCount_20_EQ_uart_rg_charsize_ETC___d299 =
	     uart_uart_rXmitBitCount == y__h15222 ;
  assign uart_uart_rg_delay_count_78_EQ_uart_rg_delay_c_ETC___d280 =
	     uart_uart_rg_delay_count == uart_rg_delay_control ;
  assign uart_uart_vrRecvBuffer_0_45_XOR_uart_uart_vrRe_ETC___d159 =
	     z__h10249 ^ uart_uart_rRecvParity ;
  assign value__h16504 =
	     (read_req_size == 2'd2) ? 3'd4 : { 1'd0, x__h16473 } ;
  assign value__h1874 =
	     uart_uart_fifoRecv_ifc_rwEnqCount_whas ? x_wget__h1480 : 8'd0 ;
  assign value__h1937 = uart_uart_fifoRecv_ifc_rDataCount - b__h1755 ;
  assign value__h1990 =
	     uart_uart_fifoRecv_ifc_rwEnqCount_whas ? 8'd255 : 8'd0 ;
  assign value__h21629 =
	     (write_req_size == 2'd2) ? 3'd4 : { 1'd0, x__h21595 } ;
  assign value__h4013 =
	     uart_uart_fifoXmit_ifc_rwEnqCount_whas ? x_wget__h3636 : 32'd0 ;
  assign value__h4076 = uart_uart_fifoXmit_ifc_rDataCount - b__h3894 ;
  assign value__h4129 =
	     uart_uart_fifoXmit_ifc_rwEnqCount_whas ? x_wget__h3695 : 32'd0 ;
  assign x__h11088 = uart_uart_rXmitCellCount + 4'd1 ;
  assign x__h11114 = uart_uart_rXmitBitCount + 6'd1 ;
  assign x__h14788 = uart_uart_rg_delay_count + 16'd1 ;
  assign x__h15612 = ~uart_uart_rXmitParity ;
  assign x__h16473 = read_req_size + 2'd1 ;
  assign x__h1686 = nextStorage__h1609 & nextMask__h1610 ;
  assign x__h18133 = 6'd8 - uart_rg_charsize ;
  assign x__h1837 = { 24'd0, b__h1755, 3'd0 } ;
  assign x__h1873 = { 120'd0, value__h1874 } ;
  assign x__h1981 = { 24'd0, value__h1937, 3'd0 } ;
  assign x__h1989 = { 120'd0, value__h1990 } ;
  assign x__h21595 = write_req_size + 2'd1 ;
  assign x__h21670 = x_wget__h3636 ;
  assign x__h3839 = nextStorage__h3765 & nextMask__h3766 ;
  assign x__h3976 = { 24'd0, b__h3894, 3'd0 } ;
  assign x__h4012 = { 96'd0, value__h4013 } ;
  assign x__h4120 = { 24'd0, value__h4076, 3'd0 } ;
  assign x__h4128 = { 96'd0, value__h4129 } ;
  assign x__h5361 = uart_uart_rRecvCellCount + 4'd1 ;
  assign x__h7065 = uart_uart_rRecvBitCount + 6'd1 ;
  assign x__h8568 = x_wget__h1480 ;
  assign x_error_status__h16125 =
	     { uart_uart_fifo_almost_full, uart_uart_error_status_register } ;
  assign x_wget__h1480 =
	     { uart_uart_vrRecvBuffer_7,
	       uart_uart_vrRecvBuffer_6,
	       uart_uart_vrRecvBuffer_5,
	       uart_uart_vrRecvBuffer_4,
	       uart_uart_vrRecvBuffer_3,
	       uart_uart_vrRecvBuffer_2,
	       uart_uart_vrRecvBuffer_1,
	       uart_uart_vrRecvBuffer_0 } ;
  assign x_wget__h3695 =
	     { _1_SL_IF_write_req_size_EQ_2_41_THEN_4_ELSE_0_C_ETC___d458[3] ?
		 8'd255 :
		 8'd0,
	       _1_SL_IF_write_req_size_EQ_2_41_THEN_4_ELSE_0_C_ETC___d458[2] ?
		 8'd255 :
		 8'd0,
	       _1_SL_IF_write_req_size_EQ_2_41_THEN_4_ELSE_0_C_ETC___d458[1] ?
		 8'd255 :
		 8'd0,
	       _1_SL_IF_write_req_size_EQ_2_41_THEN_4_ELSE_0_C_ETC___d458[0] ?
		 8'd255 :
		 8'd0 } ;
  assign y__h15222 = uart_rg_charsize - 6'd1 ;
  assign y__h1687 = enqData__h1615 & enqMask__h1616 ;
  assign y__h3840 = enqData__h3771 & enqMask__h3772 ;
  assign y__h8232 = uart_rg_charsize + 6'd1 ;
  assign y__h8254 = uart_rg_charsize + 6'd2 ;
  assign y_avValue_fst__h16577 =
	     { IF_IF_read_req_size_EQ_2_56_THEN_4_ELSE_0_CONC_ETC___d397,
	       (value__h16504 == 3'd0) ?
		 IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d382 :
		 IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d386,
	       IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d382 } ;
  assign z__h10207 = uart_uart_vrRecvBuffer_0 ^ uart_uart_vrRecvBuffer_1 ;
  assign z__h10214 = z__h10207 ^ uart_uart_vrRecvBuffer_2 ;
  assign z__h10221 = z__h10214 ^ uart_uart_vrRecvBuffer_3 ;
  assign z__h10228 = z__h10221 ^ uart_uart_vrRecvBuffer_4 ;
  assign z__h10235 = z__h10228 ^ uart_uart_vrRecvBuffer_5 ;
  assign z__h10242 = z__h10235 ^ uart_uart_vrRecvBuffer_6 ;
  assign z__h10249 = z__h10242 ^ uart_uart_vrRecvBuffer_7 ;
  assign z__h12725 =
	     IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246[0] ^
	     IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246[1] ;
  assign z__h12732 =
	     z__h12725 ^
	     IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246[2] ;
  assign z__h12739 =
	     z__h12732 ^
	     IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246[3] ;
  assign z__h12746 =
	     z__h12739 ^
	     IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246[4] ;
  assign z__h12753 =
	     z__h12746 ^
	     IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246[5] ;
  assign z__h12760 =
	     z__h12753 ^
	     IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246[6] ;
  always@(write_req_size or write_req_data)
  begin
    case (write_req_size)
      2'd0: x_wget__h3636 = { 24'd0, write_req_data[7:0] };
      2'd1: x_wget__h3636 = { 16'd0, write_req_data[15:0] };
      default: x_wget__h3636 = write_req_data;
    endcase
  end
  always@(uart_rg_charsize or
	  uart_uart_fifoXmit_ifc_rStorage or
	  parity_data__h12810 or parity_data__h12805 or parity_data__h12800)
  begin
    case (uart_rg_charsize)
      6'd5:
	  IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246 =
	      parity_data__h12810;
      6'd6:
	  IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246 =
	      parity_data__h12805;
      6'd7:
	  IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246 =
	      parity_data__h12800;
      default: IF_uart_rg_charsize_14_EQ_7_34_THEN_uart_uart__ETC___d246 =
		   uart_uart_fifoXmit_ifc_rStorage[7:0];
    endcase
  end
  always@(value__h16504 or
	  uart_uart_fifoRecv_ifc_rStorage or
	  x__h18133 or
	  IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d382 or
	  IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d386)
  begin
    case (value__h16504)
      3'd0:
	  CASE_value6504_0_IF_uart_uart_fifoRecv_ifc_rDa_ETC__q1 =
	      IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d382;
      3'd1:
	  CASE_value6504_0_IF_uart_uart_fifoRecv_ifc_rDa_ETC__q1 =
	      IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d386;
      default: CASE_value6504_0_IF_uart_uart_fifoRecv_ifc_rDa_ETC__q1 =
		   uart_uart_fifoRecv_ifc_rStorage[31:24] >> x__h18133;
    endcase
  end
  always@(value__h16504 or
	  uart_uart_fifoRecv_ifc_rStorage or
	  x__h18133 or
	  IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d382)
  begin
    case (value__h16504)
      3'd0, 3'd1:
	  CASE_value6504_0_IF_uart_uart_fifoRecv_ifc_rDa_ETC__q2 =
	      IF_uart_uart_fifoRecv_ifc_rDataCount_6_ULT_0_C_ETC___d382;
      default: CASE_value6504_0_IF_uart_uart_fifoRecv_ifc_rDa_ETC__q2 =
		   uart_uart_fifoRecv_ifc_rStorage[23:16] >> x__h18133;
    endcase
  end
  always@(read_req_addr or
	  _theResult___fst__h19805 or
	  return_data__h18849 or
	  y_avValue_fst__h16577 or
	  return_data__h16913 or
	  return_data__h19168 or return_data__h18522 or return_data__h19487)
  begin
    case (read_req_addr[5:0])
      6'h0:
	  IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424 =
	      return_data__h18849;
      6'h08:
	  IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424 =
	      y_avValue_fst__h16577;
      6'h0C:
	  IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424 =
	      return_data__h16913;
      6'h10:
	  IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424 =
	      return_data__h19168;
      6'h14:
	  IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424 =
	      return_data__h18522;
      6'h18:
	  IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424 =
	      return_data__h19487;
      default: IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424 =
		   _theResult___fst__h19805;
    endcase
  end
  always@(read_req_size or
	  IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424 or
	  a__h16637 or a__h16635)
  begin
    case (read_req_size)
      2'd0: x__h16334 = a__h16637;
      2'd1: x__h16334 = a__h16635;
      default: x__h16334 =
		   IF_read_req_addr_BITS_5_TO_0_54_EQ_0xC_65_THEN_ETC___d424;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK or `BSV_RESET_EDGE RST_N)
  if (RST_N == `BSV_RESET_VALUE)
    begin
      uart_baud_value <= `BSV_ASSIGNMENT_DELAY 16'd5;
      uart_rg_char_decide <= `BSV_ASSIGNMENT_DELAY 2'd0;
      uart_rg_charsize <= `BSV_ASSIGNMENT_DELAY 6'd8;
      uart_rg_delay_control <= `BSV_ASSIGNMENT_DELAY 16'd0;
      uart_rg_interrupt_en <= `BSV_ASSIGNMENT_DELAY 16'd0;
      uart_rg_parity <= `BSV_ASSIGNMENT_DELAY 2'd0;
      uart_rg_pullup_enable <= `BSV_ASSIGNMENT_DELAY 1'd1;
      uart_rg_rx_dma_threshold <= `BSV_ASSIGNMENT_DELAY 3'd0;
      uart_rg_rx_threshold <= `BSV_ASSIGNMENT_DELAY 5'd5;
      uart_rg_stopbits <= `BSV_ASSIGNMENT_DELAY 2'd0;
      uart_rg_tx_dma_threshold <= `BSV_ASSIGNMENT_DELAY 3'd0;
      uart_uart_error_status_register <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_fifoRecv_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY 5'd16;
      uart_uart_fifoRecv_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY 5'd0;
      uart_uart_fifoRecv_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY 128'd0;
      uart_uart_fifoRecv_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY 128'd0;
      uart_uart_fifoXmit_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY 5'd16;
      uart_uart_fifoXmit_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY 5'd0;
      uart_uart_fifoXmit_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY 128'd0;
      uart_uart_fifoXmit_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY 128'd0;
      uart_uart_fifo_almost_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_out_enable <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY 6'd0;
      uart_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY 3'd0;
      uart_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY 6'd0;
      uart_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY 1'd1;
      uart_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY 4'd0;
      uart_uart_rg_delay_count <= `BSV_ASSIGNMENT_DELAY 16'd0;
      uart_uart_vrRecvBuffer_0 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_2 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_3 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_4 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_5 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_6 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrRecvBuffer_7 <= `BSV_ASSIGNMENT_DELAY 1'd0;
      uart_uart_vrXmitBuffer_0 <= `BSV_ASSIGNMENT_DELAY
	  1'b0 /* unspecified value */ ;
      uart_uart_vrXmitBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	  1'b0 /* unspecified value */ ;
      uart_uart_vrXmitBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	  1'b0 /* unspecified value */ ;
      uart_uart_vrXmitBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	  1'b0 /* unspecified value */ ;
      uart_uart_vrXmitBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	  1'b0 /* unspecified value */ ;
      uart_uart_vrXmitBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	  1'b0 /* unspecified value */ ;
      uart_uart_vrXmitBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	  1'b0 /* unspecified value */ ;
      uart_uart_vrXmitBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	  1'b0 /* unspecified value */ ;
    end
  else
    begin
      if (uart_baud_value_EN)
	uart_baud_value <= `BSV_ASSIGNMENT_DELAY uart_baud_value_D_IN;
      if (uart_rg_char_decide_EN)
	uart_rg_char_decide <= `BSV_ASSIGNMENT_DELAY uart_rg_char_decide_D_IN;
      if (uart_rg_charsize_EN)
	uart_rg_charsize <= `BSV_ASSIGNMENT_DELAY uart_rg_charsize_D_IN;
      if (uart_rg_delay_control_EN)
	uart_rg_delay_control <= `BSV_ASSIGNMENT_DELAY
	    uart_rg_delay_control_D_IN;
      if (uart_rg_interrupt_en_EN)
	uart_rg_interrupt_en <= `BSV_ASSIGNMENT_DELAY
	    uart_rg_interrupt_en_D_IN;
      if (uart_rg_parity_EN)
	uart_rg_parity <= `BSV_ASSIGNMENT_DELAY uart_rg_parity_D_IN;
      if (uart_rg_pullup_enable_EN)
	uart_rg_pullup_enable <= `BSV_ASSIGNMENT_DELAY
	    uart_rg_pullup_enable_D_IN;
      if (uart_rg_rx_dma_threshold_EN)
	uart_rg_rx_dma_threshold <= `BSV_ASSIGNMENT_DELAY
	    uart_rg_rx_dma_threshold_D_IN;
      if (uart_rg_rx_threshold_EN)
	uart_rg_rx_threshold <= `BSV_ASSIGNMENT_DELAY
	    uart_rg_rx_threshold_D_IN;
      if (uart_rg_stopbits_EN)
	uart_rg_stopbits <= `BSV_ASSIGNMENT_DELAY uart_rg_stopbits_D_IN;
      if (uart_rg_tx_dma_threshold_EN)
	uart_rg_tx_dma_threshold <= `BSV_ASSIGNMENT_DELAY
	    uart_rg_tx_dma_threshold_D_IN;
      if (uart_uart_error_status_register_EN)
	uart_uart_error_status_register <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_error_status_register_D_IN;
      if (uart_uart_fifoRecv_ifc_rDataAvail_EN)
	uart_uart_fifoRecv_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_fifoRecv_ifc_rDataAvail_D_IN;
      if (uart_uart_fifoRecv_ifc_rDataCount_EN)
	uart_uart_fifoRecv_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_fifoRecv_ifc_rDataCount_D_IN;
      if (uart_uart_fifoRecv_ifc_rStorage_EN)
	uart_uart_fifoRecv_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_fifoRecv_ifc_rStorage_D_IN;
      if (uart_uart_fifoRecv_ifc_rStorageMask_EN)
	uart_uart_fifoRecv_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_fifoRecv_ifc_rStorageMask_D_IN;
      if (uart_uart_fifoXmit_ifc_rDataAvail_EN)
	uart_uart_fifoXmit_ifc_rDataAvail <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_fifoXmit_ifc_rDataAvail_D_IN;
      if (uart_uart_fifoXmit_ifc_rDataCount_EN)
	uart_uart_fifoXmit_ifc_rDataCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_fifoXmit_ifc_rDataCount_D_IN;
      if (uart_uart_fifoXmit_ifc_rStorage_EN)
	uart_uart_fifoXmit_ifc_rStorage <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_fifoXmit_ifc_rStorage_D_IN;
      if (uart_uart_fifoXmit_ifc_rStorageMask_EN)
	uart_uart_fifoXmit_ifc_rStorageMask <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_fifoXmit_ifc_rStorageMask_D_IN;
      if (uart_uart_fifo_almost_full_EN)
	uart_uart_fifo_almost_full <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_fifo_almost_full_D_IN;
      if (uart_uart_out_enable_EN)
	uart_uart_out_enable <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_out_enable_D_IN;
      if (uart_uart_rRecvBitCount_EN)
	uart_uart_rRecvBitCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvBitCount_D_IN;
      if (uart_uart_rRecvCellCount_EN)
	uart_uart_rRecvCellCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvCellCount_D_IN;
      if (uart_uart_rRecvParity_EN)
	uart_uart_rRecvParity <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvParity_D_IN;
      if (uart_uart_rRecvState_EN)
	uart_uart_rRecvState <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rRecvState_D_IN;
      if (uart_uart_rXmitBitCount_EN)
	uart_uart_rXmitBitCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitBitCount_D_IN;
      if (uart_uart_rXmitCellCount_EN)
	uart_uart_rXmitCellCount <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitCellCount_D_IN;
      if (uart_uart_rXmitDataOut_EN)
	uart_uart_rXmitDataOut <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitDataOut_D_IN;
      if (uart_uart_rXmitParity_EN)
	uart_uart_rXmitParity <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitParity_D_IN;
      if (uart_uart_rXmitState_EN)
	uart_uart_rXmitState <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rXmitState_D_IN;
      if (uart_uart_rg_delay_count_EN)
	uart_uart_rg_delay_count <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_rg_delay_count_D_IN;
      if (uart_uart_vrRecvBuffer_0_EN)
	uart_uart_vrRecvBuffer_0 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_0_D_IN;
      if (uart_uart_vrRecvBuffer_1_EN)
	uart_uart_vrRecvBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_1_D_IN;
      if (uart_uart_vrRecvBuffer_2_EN)
	uart_uart_vrRecvBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_2_D_IN;
      if (uart_uart_vrRecvBuffer_3_EN)
	uart_uart_vrRecvBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_3_D_IN;
      if (uart_uart_vrRecvBuffer_4_EN)
	uart_uart_vrRecvBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_4_D_IN;
      if (uart_uart_vrRecvBuffer_5_EN)
	uart_uart_vrRecvBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_5_D_IN;
      if (uart_uart_vrRecvBuffer_6_EN)
	uart_uart_vrRecvBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_6_D_IN;
      if (uart_uart_vrRecvBuffer_7_EN)
	uart_uart_vrRecvBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrRecvBuffer_7_D_IN;
      if (uart_uart_vrXmitBuffer_0_EN)
	uart_uart_vrXmitBuffer_0 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrXmitBuffer_0_D_IN;
      if (uart_uart_vrXmitBuffer_1_EN)
	uart_uart_vrXmitBuffer_1 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrXmitBuffer_1_D_IN;
      if (uart_uart_vrXmitBuffer_2_EN)
	uart_uart_vrXmitBuffer_2 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrXmitBuffer_2_D_IN;
      if (uart_uart_vrXmitBuffer_3_EN)
	uart_uart_vrXmitBuffer_3 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrXmitBuffer_3_D_IN;
      if (uart_uart_vrXmitBuffer_4_EN)
	uart_uart_vrXmitBuffer_4 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrXmitBuffer_4_D_IN;
      if (uart_uart_vrXmitBuffer_5_EN)
	uart_uart_vrXmitBuffer_5 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrXmitBuffer_5_D_IN;
      if (uart_uart_vrXmitBuffer_6_EN)
	uart_uart_vrXmitBuffer_6 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrXmitBuffer_6_D_IN;
      if (uart_uart_vrXmitBuffer_7_EN)
	uart_uart_vrXmitBuffer_7 <= `BSV_ASSIGNMENT_DELAY
	    uart_uart_vrXmitBuffer_7_D_IN;
    end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    uart_baud_value = 16'hAAAA;
    uart_rg_char_decide = 2'h2;
    uart_rg_charsize = 6'h2A;
    uart_rg_delay_control = 16'hAAAA;
    uart_rg_interrupt_en = 16'hAAAA;
    uart_rg_parity = 2'h2;
    uart_rg_pullup_enable = 1'h0;
    uart_rg_rx_dma_threshold = 3'h2;
    uart_rg_rx_threshold = 5'h0A;
    uart_rg_stopbits = 2'h2;
    uart_rg_tx_dma_threshold = 3'h2;
    uart_uart_error_status_register = 4'hA;
    uart_uart_fifoRecv_ifc_rDataAvail = 5'h0A;
    uart_uart_fifoRecv_ifc_rDataCount = 5'h0A;
    uart_uart_fifoRecv_ifc_rStorage = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    uart_uart_fifoRecv_ifc_rStorageMask =
	128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    uart_uart_fifoXmit_ifc_rDataAvail = 5'h0A;
    uart_uart_fifoXmit_ifc_rDataCount = 5'h0A;
    uart_uart_fifoXmit_ifc_rStorage = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    uart_uart_fifoXmit_ifc_rStorageMask =
	128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    uart_uart_fifo_almost_full = 1'h0;
    uart_uart_out_enable = 1'h0;
    uart_uart_rRecvBitCount = 6'h2A;
    uart_uart_rRecvCellCount = 4'hA;
    uart_uart_rRecvParity = 1'h0;
    uart_uart_rRecvState = 3'h2;
    uart_uart_rXmitBitCount = 6'h2A;
    uart_uart_rXmitCellCount = 4'hA;
    uart_uart_rXmitDataOut = 1'h0;
    uart_uart_rXmitParity = 1'h0;
    uart_uart_rXmitState = 4'hA;
    uart_uart_rg_delay_count = 16'hAAAA;
    uart_uart_vrRecvBuffer_0 = 1'h0;
    uart_uart_vrRecvBuffer_1 = 1'h0;
    uart_uart_vrRecvBuffer_2 = 1'h0;
    uart_uart_vrRecvBuffer_3 = 1'h0;
    uart_uart_vrRecvBuffer_4 = 1'h0;
    uart_uart_vrRecvBuffer_5 = 1'h0;
    uart_uart_vrRecvBuffer_6 = 1'h0;
    uart_uart_vrRecvBuffer_7 = 1'h0;
    uart_uart_vrXmitBuffer_0 = 1'h0;
    uart_uart_vrXmitBuffer_1 = 1'h0;
    uart_uart_vrXmitBuffer_2 = 1'h0;
    uart_uart_vrXmitBuffer_3 = 1'h0;
    uart_uart_vrXmitBuffer_4 = 1'h0;
    uart_uart_vrXmitBuffer_5 = 1'h0;
    uart_uart_vrXmitBuffer_6 = 1'h0;
    uart_uart_vrXmitBuffer_7 = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData_dD_OUT)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 516, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_1.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData_dD_OUT)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 516, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_2.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData_dD_OUT)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 516, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_3.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData_dD_OUT)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 516, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_4.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData_dD_OUT)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 516, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_5.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData_dD_OUT)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 516, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_6.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_uart_uart_receive_buffer_shift &&
	  WILL_FIRE_RL_uart_uart_receive_wait_for_start_bit &&
	  !uart_uart_rRecvData_dD_OUT)
	$display("Error: \"devices/uart_v2/RS232_modified.bsv\", line 516, column 9: (R0002)\n  Conflict-free rules RL_uart_uart_receive_buffer_shift and\n  RL_uart_uart_receive_wait_for_start_bit called conflicting methods read and\n  write of module instance uart_uart_vrRecvBuffer_7.\n");
  end
  // synopsys translate_on
endmodule  // mkuart

